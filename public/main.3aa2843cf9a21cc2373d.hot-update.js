/*! For license information please see main.3aa2843cf9a21cc2373d.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/Home/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var i=s("./node_modules/ogl/src/core/Program.js"),h=s("./node_modules/ogl/src/core/Mesh.js"),r=s("./app/shaders/home-fragment.glsl"),o=s("./app/shaders/home-vertex.glsl"),a=s("./node_modules/gsap/index.js");class l{constructor({element:e,geometry:t,gl:s,index:i,scene:h,sizes:r}){this.element=e,this.geometry=t,this.gl=s,this.scene=h,this.index=i,this.sizes=r,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0},this.opacity={current:0,target:0,multiplier:0,lerp:.1}}createTexture(){const e=this.element.querySelector(".home__gallery__media__image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:r.default,vertex:o.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new h.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.scale.x=2}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){a.default.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){a.default.to(this.opacity,{multiplier:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e,t,s){this.bounds&&(this.updateX(e),this.updateY(),this.program.uniforms.uSpeed.value=t,this.program.uniforms.uSpeed.value=t,this.program.uniforms.uAlpha.value=this.opacity.multiplier)}}},"./app/components/Canvas/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>d});var i=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),o=s("./app/components/Canvas/Home/Media.js"),a=s("./node_modules/prefix/index.js"),l=s.n(a),n=s("./node_modules/gsap/index.js");const d=class{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.scene=t,this.group=new h.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.galleryElementWrapper=document.querySelector(".home__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".home__gallery__media"),this.projectsElementsActive="home__article--active",this.projectsElements=document.querySelectorAll(".home__article"),this.projectsTitle=document.querySelectorAll(".home__title__article"),this.projectsTitleActive="home__title__article--active",this.transformPrefix=l()("transform"),this.scroll={current:0,target:0,start:0,lerp:.1,last:0,velocity:1},this.speed={target:0,current:0,lerp:.1},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl,{widthSegments:20,heightSegments:20})}createGallery(){this.medias=(0,i.map)(this.mediasElements,((e,t)=>new o.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.medias,(e=>e.show()))}hide(){(0,i.map)(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryElementWrapper.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){this.speed.target=1,this.scroll.last=this.scroll.current}onTouchMove({x:e,y:t}){const s=e.start-e.end;this.scroll.target=this.scroll.last-s}onTouchUp({x:e,y:t}){this.speed.target=0}onWheel({pixelY:e}){this.scroll.target+=e}onChange(e){this.index=e,console.log(this.mediasElements.length),this.index===this.mediasElements.length&&(this.index=this.index-1);const t=parseInt(this.mediasElements[this.index].getAttribute("data-index"));(0,i.map)(this.projectsElements,((e,s)=>{s===t?e.classList.add(this.projectsElementsActive):e.classList.remove(this.projectsElementsActive)})),(0,i.map)(this.projectsTitle,((e,s)=>{console.log(s,t),s===t?e.classList.add(this.projectsTitleActive):e.classList.remove(this.projectsTitleActive)}))}update(){if(!this.bounds)return;this.speed.current=n.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.scroll.target=n.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last=this.scroll.current;const e=Math.floor(Math.abs(this.scroll.current/this.scroll.limit)*this.medias.length);this.index!==e&&this.onChange(e),(0,i.map)(this.medias,((e,t)=>{e.update(this.scroll.current,this.speed.current,this.index)}))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Project/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});var i=s("./node_modules/ogl/src/core/Program.js"),h=s("./node_modules/ogl/src/core/Mesh.js"),r=s("./app/shaders/plane-fragment.glsl"),o=s("./app/shaders/plane-vertex.glsl"),a=s("./node_modules/gsap/index.js");class l{constructor({element:e,geometry:t,gl:s,index:i,scene:h,sizes:r}){this.element=e,this.geometry=t,this.gl=s,this.scene=h,this.index=i,this.sizes=r,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){const e=this.element.querySelector("img");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:r.default,vertex:o.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new h.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){a.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){a.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra=0,this.createBounds(e),this.updateX(t),this.updateY(0)}updateRotation(){this.mesh.rotation.z=a.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(e){this.bounds&&(this.updateRotation(),this.updateScale(),this.updateX(e),this.updateY(0))}}},"./app/components/Canvas/Project/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/ogl/src/core/Transform.js"),r=s("./node_modules/ogl/src/extras/Plane.js"),o=s("./app/components/Canvas/Project/Gallery.js");Object(function(){var e=new Error("Cannot find module './Picture'");throw e.code="MODULE_NOT_FOUND",e}());const a=class{constructor({gl:e,scene:t,sizes:s,transition:i}){this.id="project",this.scene=t,console.log(this.scene),this.gl=e,this.sizes=s,this.group=new h.Transform,this.transition=i,this.createGeometry(),this.createGalleries(),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new r.Plane(this.gl)}createGalleries(){this.Picture=new Object(function(){var e=new Error("Cannot find module './Picture'");throw e.code="MODULE_NOT_FOUND",e}())({gl:this.gl,scene:this.scene,sizes:this.sizes,transition:this.transition}),this.galleriesElements=document.querySelectorAll(".project__mobile"),this.galleries=(0,i.map)(this.galleriesElements,((e,t)=>new o.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.galleries,(e=>e.show()))}hide(){(0,i.map)(this.galleries,(e=>e.hide()))}onResize(e){(0,i.map)(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){(0,i.map)(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){(0,i.map)(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){(0,i.map)(this.galleries,(t=>t.onTouchUp(e)))}onWheel({pixelX:e,pixelY:t}){}update(e){(0,i.map)(this.galleries,(t=>t.update(e)))}destroy(){(0,i.map)(this.galleries,(e=>e.destroy()))}}}},(function(e){e.h=()=>"088f806d6e8ea196868f"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,