/*! For license information please see main.407cdec54112ea8f3a7f.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/Home/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/ogl/src/core/Texture.js"),h=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),r=s("./app/shaders/plane-fragment.glsl"),n=s("./app/shaders/plane-vertex.glsl"),l=s("./node_modules/gsap/index.js");class a{constructor({element:e,geometry:t,gl:s,index:i,scene:h,sizes:o}){this.element=e,this.geometry=t,this.gl=s,this.scene=h,this.index=i,this.sizes=o,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new i.Texture(this.gl);const e=this.element.querySelector(".home__gallery__media__image");this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=e.getAttribute("data-src"),this.image.onload=e=>this.texture.image=this.image}createProgram(){this.program=new h.Program(this.gl,{fragment:r.default,vertex:n.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.scale.x=2}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){l.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){l.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.bounds&&(this.updateX(e),this.updateY())}}},"./app/components/Canvas/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});var i=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/ogl/src/core/Transform.js"),o=s("./node_modules/ogl/src/extras/Plane.js"),r=s("./app/components/Canvas/Home/Media.js"),n=s("./node_modules/prefix/index.js"),l=s.n(n),a=s("./node_modules/gsap/index.js");const c=class{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.scene=t,this.group=new h.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.galleryElementWrapper=document.querySelector(".home__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".home__gallery__media"),this.projectsElementsActive="home__article--active",this.projectsElements=document.querySelectorAll(".home__article"),this.projectsTitle=document.querySelectorAll(".home__title__article"),this.projectsTitleActive="home__title__article--active",this.transformPrefix=l()("transform"),this.scroll={current:0,target:0,start:0,lerp:.1,last:0,velocity:1},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new o.Plane(this.gl)}createGallery(){this.medias=(0,i.map)(this.mediasElements,((e,t)=>new r.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.medias,(e=>e.show()))}hide(){(0,i.map)(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryElementWrapper.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){this.scroll.last=this.scroll.current}onTouchMove({x:e,y:t}){const s=e.start-e.end;this.scroll.target=this.scroll.last-s}onTouchUp({x:e,y:t}){}onWheel({pixelY:e}){this.scroll.target+=e}onChange(e){this.index=e,console.log(this.mediasElements.length),this.index===this.mediasElements.length&&(this.index=this.index-1);const t=parseInt(this.mediasElements[this.index].getAttribute("data-index"));(0,i.map)(this.projectsElements,((e,s)=>{s===t?e.classList.add(this.projectsElementsActive):e.classList.remove(this.projectsElementsActive)})),(0,i.map)(this.projectsTitle,((e,s)=>{console.log(s,t),s===t?e.classList.add(this.projectsTitleActive):e.classList.remove(this.projectsTitleActive)}))}update(){if(!this.bounds)return;this.scroll.target=a.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=a.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current,(0,i.map)(this.medias,((e,t)=>{e.update(this.scroll.current)}));const e=Math.floor(Math.abs(this.scroll.current/this.scroll.limit)*this.medias.length);this.index!==e&&this.onChange(e)}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/Project/Gallery.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});var i=s("./node_modules/lodash/lodash.js"),h=s("./app/components/Canvas/Project/Media.js"),o=s("./node_modules/gsap/index.js"),r=s("./node_modules/ogl/src/core/Transform.js");class n{constructor({element:e,geometry:t,index:s,gl:i,scene:h,sizes:o}){this.element=e,this.elementWrapper=e.querySelector(".project__mobile__wrapper"),this.geometry=t,this.index=s,this.gl=i,this.scene=h,this.sizes=o,this.group=new r.Transform,this.scroll={current:0,target:0,start:0,lerp:.1,velocity:1},this.createMedias(),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.element.querySelectorAll(".project__mobile__image"),this.medias=(0,i.map)(this.mediasElements,((e,t)=>new h.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.medias,(e=>e.show()))}hide(){(0,i.map)(this.medias,(e=>e.hide()))}onResize(e){this.bounds=this.elementWrapper.getBoundingClientRect(),this.sizes=e.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll.current)))}onTouchDown({x:e,y:t}){this.scroll.start=this.scroll.current}onTouchMove({x:e,y:t}){const s=e.start-e.end;this.scroll.target=this.scroll.start-s}onTouchUp({x:e,y:t}){}update(e){if(!this.bounds)return;const t=.05*(e.current-e.target),s=e.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=t,this.scroll.current=o.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),(0,i.map)(this.medias,((e,t)=>{const s=e.mesh.scale.x/2+.25;if("left"===this.direction){e.mesh.position.x+s<-this.sizes.width/2&&(e.extra+=this.width)}else if("right"===this.direction){e.mesh.position.x-s>this.sizes.width/2&&(e.extra-=this.width)}e.update(this.scroll.current)})),this.group.position.y=s*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>l});s("./node_modules/lodash/lodash.js");var i=s("./node_modules/ogl/src/core/Renderer.js"),h=s("./node_modules/ogl/src/core/Camera.js"),o=s("./node_modules/ogl/src/core/Transform.js"),r=s("./app/components/Canvas/Home/index.js"),n=s("./app/components/Canvas/Project/index.js");class l{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.onChangeEnd(this.template)}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new h.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new o.Transform}createHome(){this.home=new r.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createProject(){this.project=new n.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyProject(){this.project&&(this.project.destroy(),this.project=null)}onChangeStart(){this.home&&this.home.hide(),this.project&&this.project.hide()}onChangeEnd(e){"home"===e?this.createHome():this.destroyHome(),"project"===e?this.createProject():this.destroyProject()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,s=t*this.camera.aspect;this.sizes={height:t,width:s};const i={sizes:this.sizes};this.project&&this.project.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.project&&this.project.onTouchDown(t),this.home&&this.home.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,s=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.project&&this.project.onTouchMove(i),this.home&&this.home.onTouchMove(i)}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,s=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.project&&this.project.onTouchUp(i),this.home&&this.home.onTouchUp(i)}onWheel(e){this.home&&this.home.onWheel(e)}update(e){this.project&&this.project.update(e),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./styles/index.scss":(e,t,s)=>{s.r(t);var i=s("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)}},(function(e){e.h=()=>"f18e828e0d44589d9a14"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,