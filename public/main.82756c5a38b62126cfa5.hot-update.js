"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Preloader.js":(t,e,i)=>{i.r(e),i.d(e,{default:()=>l});var s=i("./app/classes/Component.js"),a=i("./node_modules/gsap/index.js"),h=i("./node_modules/ogl/src/core/Texture.js"),r=i("./app/utils/text.js");class l extends s.default{constructor({canvas:t}){super({element:".preloader",elements:{title:".preloader__text",upnumber:".preloader__number__text",downumber:".preloader__reverse__text",overlay:".preloader__overlay",container:".preloader__background"}}),this.canvas=t,window.TEXTURES={},(0,r.split)({element:this.elements.title[0],expression:"<br>"}),(0,r.split)({element:this.elements.title[0],expression:"<br>"}),this.elements.titleSpans=this.elements.title[0].querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){window.ASSETS.forEach((t=>{const e=new h.Texture(this.canvas.gl,{generateMipmaps:!1}),i=new window.Image;i.crossOrigin="anonymous",i.src=t,i.onload=t=>{e.image=i,this.onAssetLoaded()},window.TEXTURES[t]=e}))}onAssetLoaded(t){this.length+=1;const e=this.length/window.ASSETS.length;this.elements.upnumber[0].innerHTML=`${Math.round(100*e)}`,this.elements.downumber[0].innerHTML=""+(100-Math.round(100*e)),1===e&&this.onLoaded()}onLoaded(){return new Promise((t=>{this.emit("complete"),this.animateOut=a.default.timeline({delay:1,defaults:{duration:1.5,ease:"power3.inOut"}}),this.animateOut.to([this.elements.upnumber,this.elements.downumber],{autoAlpha:0,y:"-100%"},"myLabel"),this.animateOut.to(this.elements.titleSpans,{delay:.5,autoAlpha:0,y:"-100%"},"myLabel"),this.animateOut.to(this.elements.container,{delay:.5,scaleY:0},"myLabel"),this.animateOut.to(this.elements.overlay,{scaleY:0}),this.animateOut.to(this.element,{scaleY:0,transformOrigin:"100% 100%"}),this.animateOut.call((t=>{this.destroy()}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./node_modules/ogl/src/core/Texture.js":(t,e,i)=>{i.r(e),i.d(e,{Texture:()=>r});const s=new Uint8Array(4);function a(t){return 0==(t&t-1)}let h=1;class r{constructor(t,{image:e,target:i=t.TEXTURE_2D,type:s=t.UNSIGNED_BYTE,format:a=t.RGBA,internalFormat:r=a,wrapS:l=t.CLAMP_TO_EDGE,wrapT:n=t.CLAMP_TO_EDGE,generateMipmaps:g=!0,minFilter:m=(g?t.NEAREST_MIPMAP_LINEAR:t.LINEAR),magFilter:o=t.LINEAR,premultiplyAlpha:p=!1,unpackAlignment:d=4,flipY:u=i==t.TEXTURE_2D,anisotropy:E=0,level:T=0,width:_,height:A=_}={}){this.gl=t,this.id=h++,this.image=e,this.target=i,this.type=s,this.format=a,this.internalFormat=r,this.minFilter=m,this.magFilter=o,this.wrapS=l,this.wrapT=n,this.generateMipmaps=g,this.premultiplyAlpha=p,this.unpackAlignment=d,this.flipY=u,this.anisotropy=Math.min(E,this.gl.renderer.parameters.maxAnisotropy),this.level=T,this.width=_,this.height=A,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(t=0){const e=!(this.image===this.store.image&&!this.needsUpdate);if((e||this.glState.textureUnits[t]!==this.id)&&(this.gl.renderer.activeTexture(t),this.bind()),e){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,this.level,this.internalFormat,this.format,this.type,this.image[t]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let t=0;t<this.image.length;t++)this.gl.compressedTexImage2D(this.target,t,this.internalFormat,this.image[t].width,this.image[t].height,0,this.image[t].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||a(this.image.width)&&a(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let t=0;t<6;t++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,s);this.store.image=this.image}}}}},(function(t){t.h=()=>"d628bba00de6fa62bf73"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,