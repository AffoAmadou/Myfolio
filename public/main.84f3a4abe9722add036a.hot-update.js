/*! For license information please see main.84f3a4abe9722add036a.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/index.js":(t,e,s)=>{s.r(e),s.d(e,{default:()=>a});var r=s("./node_modules/ogl/src/core/Renderer.js"),i=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js");Object(function(){var t=new Error("Cannot find module 'Home'");throw t.code="MODULE_NOT_FOUND",t}());class a{constructor(){this.createRenderer(),this.createCamera(),this.createScene(),this.createCube()}createRenderer(){this.renderer=new r.Renderer,this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new i.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createCube(){this.home=new Object(function(){var t=new Error("Cannot find module 'Home'");throw t.code="MODULE_NOT_FOUND",t}())()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight})}update(){this.renderer.render({camera:this.camera,scene:this.scene})}}},"./node_modules/ogl/src/core/Camera.js":(t,e,s)=>{s.r(e),s.d(e,{Camera:()=>u});var r=s("./node_modules/ogl/src/core/Transform.js"),i=s("./node_modules/ogl/src/math/Mat4.js"),n=s("./node_modules/ogl/src/math/Vec3.js");const a=new i.Mat4,h=new n.Vec3,o=new n.Vec3;class u extends r.Transform{constructor(t,{near:e=.1,far:s=100,fov:r=45,aspect:a=1,left:h,right:o,bottom:u,top:l,zoom:c=1}={}){super(),Object.assign(this,{near:e,far:s,fov:r,aspect:a,left:h,right:o,bottom:u,top:l,zoom:c}),this.projectionMatrix=new i.Mat4,this.viewMatrix=new i.Mat4,this.projectionViewMatrix=new i.Mat4,this.worldPosition=new n.Vec3,this.type=h||o?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:t=this.near,far:e=this.far,fov:s=this.fov,aspect:r=this.aspect}={}){return Object.assign(this,{near:t,far:e,fov:s,aspect:r}),this.projectionMatrix.fromPerspective({fov:s*(Math.PI/180),aspect:r,near:t,far:e}),this.type="perspective",this}orthographic({near:t=this.near,far:e=this.far,left:s=this.left,right:r=this.right,bottom:i=this.bottom,top:n=this.top,zoom:a=this.zoom}={}){return Object.assign(this,{near:t,far:e,left:s,right:r,bottom:i,top:n,zoom:a}),s/=a,r/=a,i/=a,n/=a,this.projectionMatrix.fromOrthogonal({left:s,right:r,bottom:i,top:n,near:t,far:e}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(t){return super.lookAt(t,!0),this}project(t){return t.applyMatrix4(this.viewMatrix),t.applyMatrix4(this.projectionMatrix),this}unproject(t){return t.applyMatrix4(a.inverse(this.projectionMatrix)),t.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3,new n.Vec3]);const t=this.projectionViewMatrix;this.frustum[0].set(t[3]-t[0],t[7]-t[4],t[11]-t[8]).constant=t[15]-t[12],this.frustum[1].set(t[3]+t[0],t[7]+t[4],t[11]+t[8]).constant=t[15]+t[12],this.frustum[2].set(t[3]+t[1],t[7]+t[5],t[11]+t[9]).constant=t[15]+t[13],this.frustum[3].set(t[3]-t[1],t[7]-t[5],t[11]-t[9]).constant=t[15]-t[13],this.frustum[4].set(t[3]-t[2],t[7]-t[6],t[11]-t[10]).constant=t[15]-t[14],this.frustum[5].set(t[3]+t[2],t[7]+t[6],t[11]+t[10]).constant=t[15]+t[14];for(let t=0;t<6;t++){const e=1/this.frustum[t].distance();this.frustum[t].multiply(e),this.frustum[t].constant*=e}}frustumIntersectsMesh(t){if(!t.geometry.attributes.position)return!0;if(t.geometry.bounds&&t.geometry.bounds.radius!==1/0||t.geometry.computeBoundingSphere(),!t.geometry.bounds)return!0;const e=h;e.copy(t.geometry.bounds.center),e.applyMatrix4(t.worldMatrix);const s=t.geometry.bounds.radius*t.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(e,s)}frustumIntersectsSphere(t,e){const s=o;for(let r=0;r<6;r++){const i=this.frustum[r];if(s.copy(i).dot(t)+i.constant<-e)return!1}return!0}}},"./node_modules/ogl/src/core/Renderer.js":(t,e,s)=>{s.r(e),s.d(e,{Renderer:()=>n});const r=new(s("./node_modules/ogl/src/math/Vec3.js").Vec3);let i=1;class n{constructor({canvas:t=document.createElement("canvas"),width:e=300,height:s=150,dpr:r=1,alpha:n=!1,depth:a=!0,stencil:h=!1,antialias:o=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:l=!1,powerPreference:c="default",autoClear:d=!0,webgl:p=2}={}){const m={alpha:n,depth:a,stencil:h,antialias:o,premultipliedAlpha:u,preserveDrawingBuffer:l,powerPreference:c};this.dpr=r,this.alpha=n,this.color=!0,this.depth=a,this.stencil=h,this.premultipliedAlpha=u,this.autoClear=d,this.id=i++,2===p&&(this.gl=t.getContext("webgl2",m)),this.isWebgl2=!!this.gl,this.gl||(this.gl=t.getContext("webgl",m)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(e,s),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={x:0,y:0,width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.state.currentProgram=null,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.getExtension("WEBGL_compressed_texture_astc"),this.getExtension("EXT_texture_compression_bptc"),this.getExtension("WEBGL_compressed_texture_s3tc"),this.getExtension("WEBGL_compressed_texture_etc1"),this.getExtension("WEBGL_compressed_texture_pvrtc"),this.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(t,e){this.width=t,this.height=e,this.gl.canvas.width=t*this.dpr,this.gl.canvas.height=e*this.dpr,Object.assign(this.gl.canvas.style,{width:t+"px",height:e+"px"})}setViewport(t,e,s=0,r=0){this.state.viewport.width===t&&this.state.viewport.height===e||(this.state.viewport.width=t,this.state.viewport.height=e,this.state.viewport.x=s,this.state.viewport.y=r,this.gl.viewport(s,r,t,e))}setScissor(t,e,s=0,r=0){this.gl.scissor(s,r,t,e)}enable(t){!0!==this.state[t]&&(this.gl.enable(t),this.state[t]=!0)}disable(t){!1!==this.state[t]&&(this.gl.disable(t),this.state[t]=!1)}setBlendFunc(t,e,s,r){this.state.blendFunc.src===t&&this.state.blendFunc.dst===e&&this.state.blendFunc.srcAlpha===s&&this.state.blendFunc.dstAlpha===r||(this.state.blendFunc.src=t,this.state.blendFunc.dst=e,this.state.blendFunc.srcAlpha=s,this.state.blendFunc.dstAlpha=r,void 0!==s?this.gl.blendFuncSeparate(t,e,s,r):this.gl.blendFunc(t,e))}setBlendEquation(t,e){t=t||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===t&&this.state.blendEquation.modeAlpha===e||(this.state.blendEquation.modeRGB=t,this.state.blendEquation.modeAlpha=e,void 0!==e?this.gl.blendEquationSeparate(t,e):this.gl.blendEquation(t))}setCullFace(t){this.state.cullFace!==t&&(this.state.cullFace=t,this.gl.cullFace(t))}setFrontFace(t){this.state.frontFace!==t&&(this.state.frontFace=t,this.gl.frontFace(t))}setDepthMask(t){this.state.depthMask!==t&&(this.state.depthMask=t,this.gl.depthMask(t))}setDepthFunc(t){this.state.depthFunc!==t&&(this.state.depthFunc=t,this.gl.depthFunc(t))}activeTexture(t){this.state.activeTextureUnit!==t&&(this.state.activeTextureUnit=t,this.gl.activeTexture(this.gl.TEXTURE0+t))}bindFramebuffer({target:t=this.gl.FRAMEBUFFER,buffer:e=null}={}){this.state.framebuffer!==e&&(this.state.framebuffer=e,this.gl.bindFramebuffer(t,e))}getExtension(t,e,s){return e&&this.gl[e]?this.gl[e].bind(this.gl):(this.extensions[t]||(this.extensions[t]=this.gl.getExtension(t)),e?this.extensions[t]?this.extensions[t][s].bind(this.extensions[t]):null:this.extensions[t])}sortOpaque(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:t.zDepth!==e.zDepth?t.zDepth-e.zDepth:e.id-t.id}sortTransparent(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.zDepth!==e.zDepth?e.zDepth-t.zDepth:e.id-t.id}sortUI(t,e){return t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program.id!==e.program.id?t.program.id-e.program.id:e.id-t.id}getRenderList({scene:t,camera:e,frustumCull:s,sort:i}){let n=[];if(e&&s&&e.updateFrustum(),t.traverse((t=>{if(!t.visible)return!0;t.draw&&(s&&t.frustumCulled&&e&&!e.frustumIntersectsMesh(t)||n.push(t))})),i){const t=[],s=[],i=[];n.forEach((n=>{n.program.transparent?n.program.depthTest?s.push(n):i.push(n):t.push(n),n.zDepth=0,0===n.renderOrder&&n.program.depthTest&&e&&(n.worldMatrix.getTranslation(r),r.applyMatrix4(e.projectionViewMatrix),n.zDepth=r.z)})),t.sort(this.sortOpaque),s.sort(this.sortTransparent),i.sort(this.sortUI),n=t.concat(s,i)}return n}render({scene:t,camera:e,target:s=null,update:r=!0,sort:i=!0,frustumCull:n=!0,clear:a}){null===s?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(s),this.setViewport(s.width,s.height)),(a||this.autoClear&&!1!==a)&&(!this.depth||s&&!s.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),r&&t.updateMatrixWorld(),e&&e.updateMatrixWorld();this.getRenderList({scene:t,camera:e,frustumCull:n,sort:i}).forEach((t=>{t.draw({camera:e})}))}}},"./node_modules/ogl/src/core/Transform.js":(t,e,s)=>{s.r(e),s.d(e,{Transform:()=>h});var r=s("./node_modules/ogl/src/math/Vec3.js"),i=s("./node_modules/ogl/src/math/Quat.js"),n=s("./node_modules/ogl/src/math/Mat4.js"),a=s("./node_modules/ogl/src/math/Euler.js");class h{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new n.Mat4,this.worldMatrix=new n.Mat4,this.matrixAutoUpdate=!0,this.position=new r.Vec3,this.quaternion=new i.Quat,this.scale=new r.Vec3(1),this.rotation=new a.Euler,this.up=new r.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(t,e=!0){this.parent&&t!==this.parent&&this.parent.removeChild(this,!1),this.parent=t,e&&t&&t.addChild(this,!1)}addChild(t,e=!0){~this.children.indexOf(t)||this.children.push(t),e&&t.setParent(this,!1)}removeChild(t,e=!0){~this.children.indexOf(t)&&this.children.splice(this.children.indexOf(t),1),e&&t.setParent(null,!1)}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||t)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,t=!0);for(let e=0,s=this.children.length;e<s;e++)this.children[e].updateMatrixWorld(t)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(t){if(!t(this))for(let e=0,s=this.children.length;e<s;e++)this.children[e].traverse(t)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(t,e=!1){e?this.matrix.lookAt(this.position,t,this.up):this.matrix.lookAt(t,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/math/Euler.js":(t,e,s)=>{s.r(e),s.d(e,{Euler:()=>n});var r=s("./node_modules/ogl/src/math/functions/EulerFunc.js");const i=new(s("./node_modules/ogl/src/math/Mat4.js").Mat4);class n extends Array{constructor(t=0,e=t,s=t,r="YXZ"){return super(t,e,s),this.order=r,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set(t,e=t,s=t){return t.length?this.copy(t):(this[0]=t,this[1]=e,this[2]=s,this.onChange(),this)}copy(t){return this[0]=t[0],this[1]=t[1],this[2]=t[2],this.onChange(),this}reorder(t){return this.order=t,this.onChange(),this}fromRotationMatrix(t,e=this.order){return r.fromRotationMatrix(this,t,e),this}fromQuaternion(t,e=this.order){return i.fromQuaternion(t),this.fromRotationMatrix(i,e)}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}}},"./node_modules/ogl/src/math/Mat4.js":(t,e,s)=>{s.r(e),s.d(e,{Mat4:()=>i});var r=s("./node_modules/ogl/src/math/functions/Mat4Func.js");class i extends Array{constructor(t=1,e=0,s=0,r=0,i=0,n=1,a=0,h=0,o=0,u=0,l=1,c=0,d=0,p=0,m=0,g=1){return super(t,e,s,r,i,n,a,h,o,u,l,c,d,p,m,g),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(t){this[12]=t}set y(t){this[13]=t}set z(t){this[14]=t}set w(t){this[15]=t}set(t,e,s,i,n,a,h,o,u,l,c,d,p,m,g,f){return t.length?this.copy(t):(r.set(this,t,e,s,i,n,a,h,o,u,l,c,d,p,m,g,f),this)}translate(t,e=this){return r.translate(this,e,t),this}rotate(t,e,s=this){return r.rotate(this,s,t,e),this}scale(t,e=this){return r.scale(this,e,"number"==typeof t?[t,t,t]:t),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this}identity(){return r.identity(this),this}copy(t){return r.copy(this,t),this}fromPerspective({fov:t,aspect:e,near:s,far:i}={}){return r.perspective(this,t,e,s,i),this}fromOrthogonal({left:t,right:e,bottom:s,top:i,near:n,far:a}){return r.ortho(this,t,e,s,i,n,a),this}fromQuaternion(t){return r.fromQuat(this,t),this}setPosition(t){return this.x=t[0],this.y=t[1],this.z=t[2],this}inverse(t=this){return r.invert(this,t),this}compose(t,e,s){return r.fromRotationTranslationScale(this,t,e,s),this}getRotation(t){return r.getRotation(t,this),this}getTranslation(t){return r.getTranslation(t,this),this}getScaling(t){return r.getScaling(t,this),this}getMaxScaleOnAxis(){return r.getMaxScaleOnAxis(this)}lookAt(t,e,s){return r.targetTo(this,t,e,s),this}determinant(){return r.determinant(this)}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this[4]=t[e+4],this[5]=t[e+5],this[6]=t[e+6],this[7]=t[e+7],this[8]=t[e+8],this[9]=t[e+9],this[10]=t[e+10],this[11]=t[e+11],this[12]=t[e+12],this[13]=t[e+13],this[14]=t[e+14],this[15]=t[e+15],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t[e+4]=this[4],t[e+5]=this[5],t[e+6]=this[6],t[e+7]=this[7],t[e+8]=this[8],t[e+9]=this[9],t[e+10]=this[10],t[e+11]=this[11],t[e+12]=this[12],t[e+13]=this[13],t[e+14]=this[14],t[e+15]=this[15],t}}},"./node_modules/ogl/src/math/Quat.js":(t,e,s)=>{s.r(e),s.d(e,{Quat:()=>i});var r=s("./node_modules/ogl/src/math/functions/QuatFunc.js");class i extends Array{constructor(t=0,e=0,s=0,r=1){return super(t,e,s,r),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(t){this[0]=t,this.onChange()}set y(t){this[1]=t,this.onChange()}set z(t){this[2]=t,this.onChange()}set w(t){this[3]=t,this.onChange()}identity(){return r.identity(this),this.onChange(),this}set(t,e,s,i){return t.length?this.copy(t):(r.set(this,t,e,s,i),this.onChange(),this)}rotateX(t){return r.rotateX(this,this,t),this.onChange(),this}rotateY(t){return r.rotateY(this,this,t),this.onChange(),this}rotateZ(t){return r.rotateZ(this,this,t),this.onChange(),this}inverse(t=this){return r.invert(this,t),this.onChange(),this}conjugate(t=this){return r.conjugate(this,t),this.onChange(),this}copy(t){return r.copy(this,t),this.onChange(),this}normalize(t=this){return r.normalize(this,t),this.onChange(),this}multiply(t,e){return e?r.multiply(this,t,e):r.multiply(this,this,t),this.onChange(),this}dot(t){return r.dot(this,t)}fromMatrix3(t){return r.fromMat3(this,t),this.onChange(),this}fromEuler(t){return r.fromEuler(this,t,t.order),this}fromAxisAngle(t,e){return r.setAxisAngle(this,t,e),this}slerp(t,e){return r.slerp(this,this,t,e),this}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this[3]=t[e+3],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t[e+3]=this[3],t}}},"./node_modules/ogl/src/math/Vec3.js":(t,e,s)=>{s.r(e),s.d(e,{Vec3:()=>i});var r=s("./node_modules/ogl/src/math/functions/Vec3Func.js");class i extends Array{constructor(t=0,e=t,s=t){return super(t,e,s),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(t){this[0]=t}set y(t){this[1]=t}set z(t){this[2]=t}set(t,e=t,s=t){return t.length?this.copy(t):(r.set(this,t,e,s),this)}copy(t){return r.copy(this,t),this}add(t,e){return e?r.add(this,t,e):r.add(this,this,t),this}sub(t,e){return e?r.subtract(this,t,e):r.subtract(this,this,t),this}multiply(t){return t.length?r.multiply(this,this,t):r.scale(this,this,t),this}divide(t){return t.length?r.divide(this,this,t):r.scale(this,this,1/t),this}inverse(t=this){return r.inverse(this,t),this}len(){return r.length(this)}distance(t){return t?r.distance(this,t):r.length(this)}squaredLen(){return r.squaredLength(this)}squaredDistance(t){return t?r.squaredDistance(this,t):r.squaredLength(this)}negate(t=this){return r.negate(this,t),this}cross(t,e){return e?r.cross(this,t,e):r.cross(this,this,t),this}scale(t){return r.scale(this,this,t),this}normalize(){return r.normalize(this,this),this}dot(t){return r.dot(this,t)}equals(t){return r.exactEquals(this,t)}applyMatrix3(t){return r.transformMat3(this,this,t),this}applyMatrix4(t){return r.transformMat4(this,this,t),this}scaleRotateMatrix4(t){return r.scaleRotateMat4(this,this,t),this}applyQuaternion(t){return r.transformQuat(this,this,t),this}angle(t){return r.angle(this,t)}lerp(t,e){return r.lerp(this,this,t,e),this}clone(){return new i(this[0],this[1],this[2])}fromArray(t,e=0){return this[0]=t[e],this[1]=t[e+1],this[2]=t[e+2],this}toArray(t=[],e=0){return t[e]=this[0],t[e+1]=this[1],t[e+2]=this[2],t}transformDirection(t){const e=this[0],s=this[1],r=this[2];return this[0]=t[0]*e+t[4]*s+t[8]*r,this[1]=t[1]*e+t[5]*s+t[9]*r,this[2]=t[2]*e+t[6]*s+t[10]*r,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(t,e,s)=>{function r(t,e,s="YXZ"){return"XYZ"===s?(t[1]=Math.asin(Math.min(Math.max(e[8],-1),1)),Math.abs(e[8])<.99999?(t[0]=Math.atan2(-e[9],e[10]),t[2]=Math.atan2(-e[4],e[0])):(t[0]=Math.atan2(e[6],e[5]),t[2]=0)):"YXZ"===s?(t[0]=Math.asin(-Math.min(Math.max(e[9],-1),1)),Math.abs(e[9])<.99999?(t[1]=Math.atan2(e[8],e[10]),t[2]=Math.atan2(e[1],e[5])):(t[1]=Math.atan2(-e[2],e[0]),t[2]=0)):"ZXY"===s?(t[0]=Math.asin(Math.min(Math.max(e[6],-1),1)),Math.abs(e[6])<.99999?(t[1]=Math.atan2(-e[2],e[10]),t[2]=Math.atan2(-e[4],e[5])):(t[1]=0,t[2]=Math.atan2(e[1],e[0]))):"ZYX"===s?(t[1]=Math.asin(-Math.min(Math.max(e[2],-1),1)),Math.abs(e[2])<.99999?(t[0]=Math.atan2(e[6],e[10]),t[2]=Math.atan2(e[1],e[0])):(t[0]=0,t[2]=Math.atan2(-e[4],e[5]))):"YZX"===s?(t[2]=Math.asin(Math.min(Math.max(e[1],-1),1)),Math.abs(e[1])<.99999?(t[0]=Math.atan2(-e[9],e[5]),t[1]=Math.atan2(-e[2],e[0])):(t[0]=0,t[1]=Math.atan2(e[8],e[10]))):"XZY"===s&&(t[2]=Math.asin(-Math.min(Math.max(e[4],-1),1)),Math.abs(e[4])<.99999?(t[0]=Math.atan2(e[6],e[5]),t[1]=Math.atan2(e[8],e[0])):(t[0]=Math.atan2(-e[9],e[10]),t[1]=0)),t}s.r(e),s.d(e,{fromRotationMatrix:()=>r})},"./node_modules/ogl/src/math/functions/Mat4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>y,copy:()=>r,determinant:()=>o,fromQuat:()=>M,fromRotationTranslationScale:()=>x,getMaxScaleOnAxis:()=>g,getRotation:()=>f,getScaling:()=>m,getTranslation:()=>p,identity:()=>n,invert:()=>h,multiply:()=>u,multiplyScalar:()=>v,ortho:()=>E,perspective:()=>_,rotate:()=>d,scale:()=>c,set:()=>i,subtract:()=>b,targetTo:()=>w,translate:()=>l,transpose:()=>a});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function i(t,e,s,r,i,n,a,h,o,u,l,c,d,p,m,g,f){return t[0]=e,t[1]=s,t[2]=r,t[3]=i,t[4]=n,t[5]=a,t[6]=h,t[7]=o,t[8]=u,t[9]=l,t[10]=c,t[11]=d,t[12]=p,t[13]=m,t[14]=g,t[15]=f,t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function a(t,e){if(t===e){let s=e[1],r=e[2],i=e[3],n=e[6],a=e[7],h=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=s,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=n,t[11]=e[14],t[12]=i,t[13]=a,t[14]=h}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function h(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=e[4],h=e[5],o=e[6],u=e[7],l=e[8],c=e[9],d=e[10],p=e[11],m=e[12],g=e[13],f=e[14],x=e[15],M=s*h-r*a,_=s*o-i*a,E=s*u-n*a,w=r*o-i*h,y=r*u-n*h,b=i*u-n*o,v=l*g-c*m,A=l*f-d*m,C=l*x-p*m,F=c*f-d*g,O=c*x-p*g,j=d*x-p*f,T=M*j-_*O+E*F+w*C-y*A+b*v;return T?(T=1/T,t[0]=(h*j-o*O+u*F)*T,t[1]=(i*O-r*j-n*F)*T,t[2]=(g*b-f*y+x*w)*T,t[3]=(d*y-c*b-p*w)*T,t[4]=(o*C-a*j-u*A)*T,t[5]=(s*j-i*C+n*A)*T,t[6]=(f*E-m*b-x*_)*T,t[7]=(l*b-d*E+p*_)*T,t[8]=(a*O-h*C+u*v)*T,t[9]=(r*C-s*O-n*v)*T,t[10]=(m*y-g*E+x*M)*T,t[11]=(c*E-l*y-p*M)*T,t[12]=(h*A-a*F-o*v)*T,t[13]=(s*F-r*A+i*v)*T,t[14]=(g*_-m*w-f*M)*T,t[15]=(l*w-c*_+d*M)*T,t):null}function o(t){let e=t[0],s=t[1],r=t[2],i=t[3],n=t[4],a=t[5],h=t[6],o=t[7],u=t[8],l=t[9],c=t[10],d=t[11],p=t[12],m=t[13],g=t[14],f=t[15];return(e*a-s*n)*(c*f-d*g)-(e*h-r*n)*(l*f-d*m)+(e*o-i*n)*(l*g-c*m)+(s*h-r*a)*(u*f-d*p)-(s*o-i*a)*(u*g-c*p)+(r*o-i*h)*(u*m-l*p)}function u(t,e,s){let r=e[0],i=e[1],n=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],c=e[8],d=e[9],p=e[10],m=e[11],g=e[12],f=e[13],x=e[14],M=e[15],_=s[0],E=s[1],w=s[2],y=s[3];return t[0]=_*r+E*h+w*c+y*g,t[1]=_*i+E*o+w*d+y*f,t[2]=_*n+E*u+w*p+y*x,t[3]=_*a+E*l+w*m+y*M,_=s[4],E=s[5],w=s[6],y=s[7],t[4]=_*r+E*h+w*c+y*g,t[5]=_*i+E*o+w*d+y*f,t[6]=_*n+E*u+w*p+y*x,t[7]=_*a+E*l+w*m+y*M,_=s[8],E=s[9],w=s[10],y=s[11],t[8]=_*r+E*h+w*c+y*g,t[9]=_*i+E*o+w*d+y*f,t[10]=_*n+E*u+w*p+y*x,t[11]=_*a+E*l+w*m+y*M,_=s[12],E=s[13],w=s[14],y=s[15],t[12]=_*r+E*h+w*c+y*g,t[13]=_*i+E*o+w*d+y*f,t[14]=_*n+E*u+w*p+y*x,t[15]=_*a+E*l+w*m+y*M,t}function l(t,e,s){let r,i,n,a,h,o,u,l,c,d,p,m,g=s[0],f=s[1],x=s[2];return e===t?(t[12]=e[0]*g+e[4]*f+e[8]*x+e[12],t[13]=e[1]*g+e[5]*f+e[9]*x+e[13],t[14]=e[2]*g+e[6]*f+e[10]*x+e[14],t[15]=e[3]*g+e[7]*f+e[11]*x+e[15]):(r=e[0],i=e[1],n=e[2],a=e[3],h=e[4],o=e[5],u=e[6],l=e[7],c=e[8],d=e[9],p=e[10],m=e[11],t[0]=r,t[1]=i,t[2]=n,t[3]=a,t[4]=h,t[5]=o,t[6]=u,t[7]=l,t[8]=c,t[9]=d,t[10]=p,t[11]=m,t[12]=r*g+h*f+c*x+e[12],t[13]=i*g+o*f+d*x+e[13],t[14]=n*g+u*f+p*x+e[14],t[15]=a*g+l*f+m*x+e[15]),t}function c(t,e,s){let r=s[0],i=s[1],n=s[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function d(t,e,s,r){let i,n,a,h,o,u,l,c,d,p,m,g,f,x,M,_,E,w,y,b,v,A,C,F,O=r[0],j=r[1],T=r[2],q=Math.hypot(O,j,T);return Math.abs(q)<1e-6?null:(q=1/q,O*=q,j*=q,T*=q,i=Math.sin(s),n=Math.cos(s),a=1-n,h=e[0],o=e[1],u=e[2],l=e[3],c=e[4],d=e[5],p=e[6],m=e[7],g=e[8],f=e[9],x=e[10],M=e[11],_=O*O*a+n,E=j*O*a+T*i,w=T*O*a-j*i,y=O*j*a-T*i,b=j*j*a+n,v=T*j*a+O*i,A=O*T*a+j*i,C=j*T*a-O*i,F=T*T*a+n,t[0]=h*_+c*E+g*w,t[1]=o*_+d*E+f*w,t[2]=u*_+p*E+x*w,t[3]=l*_+m*E+M*w,t[4]=h*y+c*b+g*v,t[5]=o*y+d*b+f*v,t[6]=u*y+p*b+x*v,t[7]=l*y+m*b+M*v,t[8]=h*A+c*C+g*F,t[9]=o*A+d*C+f*F,t[10]=u*A+p*C+x*F,t[11]=l*A+m*C+M*F,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function p(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function m(t,e){let s=e[0],r=e[1],i=e[2],n=e[4],a=e[5],h=e[6],o=e[8],u=e[9],l=e[10];return t[0]=Math.hypot(s,r,i),t[1]=Math.hypot(n,a,h),t[2]=Math.hypot(o,u,l),t}function g(t){let e=t[0],s=t[1],r=t[2],i=t[4],n=t[5],a=t[6],h=t[8],o=t[9],u=t[10];const l=e*e+s*s+r*r,c=i*i+n*n+a*a,d=h*h+o*o+u*u;return Math.sqrt(Math.max(l,c,d))}const f=function(){const t=[0,0,0];return function(e,s){let r=t;m(r,s);let i=1/r[0],n=1/r[1],a=1/r[2],h=s[0]*i,o=s[1]*n,u=s[2]*a,l=s[4]*i,c=s[5]*n,d=s[6]*a,p=s[8]*i,g=s[9]*n,f=s[10]*a,x=h+c+f,M=0;return x>0?(M=2*Math.sqrt(x+1),e[3]=.25*M,e[0]=(d-g)/M,e[1]=(p-u)/M,e[2]=(o-l)/M):h>c&&h>f?(M=2*Math.sqrt(1+h-c-f),e[3]=(d-g)/M,e[0]=.25*M,e[1]=(o+l)/M,e[2]=(p+u)/M):c>f?(M=2*Math.sqrt(1+c-h-f),e[3]=(p-u)/M,e[0]=(o+l)/M,e[1]=.25*M,e[2]=(d+g)/M):(M=2*Math.sqrt(1+f-h-c),e[3]=(o-l)/M,e[0]=(p+u)/M,e[1]=(d+g)/M,e[2]=.25*M),e}}();function x(t,e,s,r){let i=e[0],n=e[1],a=e[2],h=e[3],o=i+i,u=n+n,l=a+a,c=i*o,d=i*u,p=i*l,m=n*u,g=n*l,f=a*l,x=h*o,M=h*u,_=h*l,E=r[0],w=r[1],y=r[2];return t[0]=(1-(m+f))*E,t[1]=(d+_)*E,t[2]=(p-M)*E,t[3]=0,t[4]=(d-_)*w,t[5]=(1-(c+f))*w,t[6]=(g+x)*w,t[7]=0,t[8]=(p+M)*y,t[9]=(g-x)*y,t[10]=(1-(c+m))*y,t[11]=0,t[12]=s[0],t[13]=s[1],t[14]=s[2],t[15]=1,t}function M(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=s+s,h=r+r,o=i+i,u=s*a,l=r*a,c=r*h,d=i*a,p=i*h,m=i*o,g=n*a,f=n*h,x=n*o;return t[0]=1-c-m,t[1]=l+x,t[2]=d-f,t[3]=0,t[4]=l-x,t[5]=1-u-m,t[6]=p+g,t[7]=0,t[8]=d+f,t[9]=p-g,t[10]=1-u-c,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _(t,e,s,r,i){let n=1/Math.tan(e/2),a=1/(r-i);return t[0]=n/s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(i+r)*a,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*i*r*a,t[15]=0,t}function E(t,e,s,r,i,n,a){let h=1/(e-s),o=1/(r-i),u=1/(n-a);return t[0]=-2*h,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(e+s)*h,t[13]=(i+r)*o,t[14]=(a+n)*u,t[15]=1,t}function w(t,e,s,r){let i=e[0],n=e[1],a=e[2],h=r[0],o=r[1],u=r[2],l=i-s[0],c=n-s[1],d=a-s[2],p=l*l+c*c+d*d;0===p?d=1:(p=1/Math.sqrt(p),l*=p,c*=p,d*=p);let m=o*d-u*c,g=u*l-h*d,f=h*c-o*l;return p=m*m+g*g+f*f,0===p&&(u?h+=1e-6:o?u+=1e-6:o+=1e-6,m=o*d-u*c,g=u*l-h*d,f=h*c-o*l,p=m*m+g*g+f*f),p=1/Math.sqrt(p),m*=p,g*=p,f*=p,t[0]=m,t[1]=g,t[2]=f,t[3]=0,t[4]=c*f-d*g,t[5]=d*m-l*f,t[6]=l*g-c*m,t[7]=0,t[8]=l,t[9]=c,t[10]=d,t[11]=0,t[12]=i,t[13]=n,t[14]=a,t[15]=1,t}function y(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t[4]=e[4]+s[4],t[5]=e[5]+s[5],t[6]=e[6]+s[6],t[7]=e[7]+s[7],t[8]=e[8]+s[8],t[9]=e[9]+s[9],t[10]=e[10]+s[10],t[11]=e[11]+s[11],t[12]=e[12]+s[12],t[13]=e[13]+s[13],t[14]=e[14]+s[14],t[15]=e[15]+s[15],t}function b(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t[3]=e[3]-s[3],t[4]=e[4]-s[4],t[5]=e[5]-s[5],t[6]=e[6]-s[6],t[7]=e[7]-s[7],t[8]=e[8]-s[8],t[9]=e[9]-s[9],t[10]=e[10]-s[10],t[11]=e[11]-s[11],t[12]=e[12]-s[12],t[13]=e[13]-s[13],t[14]=e[14]-s[14],t[15]=e[15]-s[15],t}function v(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t[4]=e[4]*s,t[5]=e[5]*s,t[6]=e[6]*s,t[7]=e[7]*s,t[8]=e[8]*s,t[9]=e[9]*s,t[10]=e[10]*s,t[11]=e[11]*s,t[12]=e[12]*s,t[13]=e[13]*s,t[14]=e[14]*s,t[15]=e[15]*s,t}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>x,conjugate:()=>d,copy:()=>g,dot:()=>_,fromEuler:()=>m,fromMat3:()=>p,identity:()=>i,invert:()=>c,length:()=>w,lerp:()=>E,multiply:()=>a,normalize:()=>y,rotateX:()=>h,rotateY:()=>o,rotateZ:()=>u,scale:()=>M,set:()=>f,setAxisAngle:()=>n,slerp:()=>l});var r=s("./node_modules/ogl/src/math/functions/Vec4Func.js");function i(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function n(t,e,s){s*=.5;let r=Math.sin(s);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(s),t}function a(t,e,s){let r=e[0],i=e[1],n=e[2],a=e[3],h=s[0],o=s[1],u=s[2],l=s[3];return t[0]=r*l+a*h+i*u-n*o,t[1]=i*l+a*o+n*h-r*u,t[2]=n*l+a*u+r*o-i*h,t[3]=a*l-r*h-i*o-n*u,t}function h(t,e,s){s*=.5;let r=e[0],i=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=r*o+a*h,t[1]=i*o+n*h,t[2]=n*o-i*h,t[3]=a*o-r*h,t}function o(t,e,s){s*=.5;let r=e[0],i=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=r*o-n*h,t[1]=i*o+a*h,t[2]=n*o+r*h,t[3]=a*o-i*h,t}function u(t,e,s){s*=.5;let r=e[0],i=e[1],n=e[2],a=e[3],h=Math.sin(s),o=Math.cos(s);return t[0]=r*o+i*h,t[1]=i*o-r*h,t[2]=n*o+a*h,t[3]=a*o-n*h,t}function l(t,e,s,r){let i,n,a,h,o,u=e[0],l=e[1],c=e[2],d=e[3],p=s[0],m=s[1],g=s[2],f=s[3];return n=u*p+l*m+c*g+d*f,n<0&&(n=-n,p=-p,m=-m,g=-g,f=-f),1-n>1e-6?(i=Math.acos(n),a=Math.sin(i),h=Math.sin((1-r)*i)/a,o=Math.sin(r*i)/a):(h=1-r,o=r),t[0]=h*u+o*p,t[1]=h*l+o*m,t[2]=h*c+o*g,t[3]=h*d+o*f,t}function c(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=s*s+r*r+i*i+n*n,h=a?1/a:0;return t[0]=-s*h,t[1]=-r*h,t[2]=-i*h,t[3]=n*h,t}function d(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function p(t,e){let s,r=e[0]+e[4]+e[8];if(r>0)s=Math.sqrt(r+1),t[3]=.5*s,s=.5/s,t[0]=(e[5]-e[7])*s,t[1]=(e[6]-e[2])*s,t[2]=(e[1]-e[3])*s;else{let r=0;e[4]>e[0]&&(r=1),e[8]>e[3*r+r]&&(r=2);let i=(r+1)%3,n=(r+2)%3;s=Math.sqrt(e[3*r+r]-e[3*i+i]-e[3*n+n]+1),t[r]=.5*s,s=.5/s,t[3]=(e[3*i+n]-e[3*n+i])*s,t[i]=(e[3*i+r]+e[3*r+i])*s,t[n]=(e[3*n+r]+e[3*r+n])*s}return t}function m(t,e,s="YXZ"){let r=Math.sin(.5*e[0]),i=Math.cos(.5*e[0]),n=Math.sin(.5*e[1]),a=Math.cos(.5*e[1]),h=Math.sin(.5*e[2]),o=Math.cos(.5*e[2]);return"XYZ"===s?(t[0]=r*a*o+i*n*h,t[1]=i*n*o-r*a*h,t[2]=i*a*h+r*n*o,t[3]=i*a*o-r*n*h):"YXZ"===s?(t[0]=r*a*o+i*n*h,t[1]=i*n*o-r*a*h,t[2]=i*a*h-r*n*o,t[3]=i*a*o+r*n*h):"ZXY"===s?(t[0]=r*a*o-i*n*h,t[1]=i*n*o+r*a*h,t[2]=i*a*h+r*n*o,t[3]=i*a*o-r*n*h):"ZYX"===s?(t[0]=r*a*o-i*n*h,t[1]=i*n*o+r*a*h,t[2]=i*a*h-r*n*o,t[3]=i*a*o+r*n*h):"YZX"===s?(t[0]=r*a*o+i*n*h,t[1]=i*n*o+r*a*h,t[2]=i*a*h-r*n*o,t[3]=i*a*o-r*n*h):"XZY"===s&&(t[0]=r*a*o-i*n*h,t[1]=i*n*o-r*a*h,t[2]=i*a*h+r*n*o,t[3]=i*a*o+r*n*h),t}const g=r.copy,f=r.set,x=r.add,M=r.scale,_=r.dot,E=r.lerp,w=r.length,y=r.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>a,angle:()=>v,copy:()=>i,cross:()=>M,distance:()=>c,divide:()=>u,dot:()=>x,exactEquals:()=>A,inverse:()=>g,length:()=>r,lerp:()=>_,multiply:()=>o,negate:()=>m,normalize:()=>f,scale:()=>l,scaleRotateMat4:()=>w,set:()=>n,squaredDistance:()=>d,squaredLength:()=>p,subtract:()=>h,transformMat3:()=>y,transformMat4:()=>E,transformQuat:()=>b});function r(t){let e=t[0],s=t[1],r=t[2];return Math.sqrt(e*e+s*s+r*r)}function i(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function n(t,e,s,r){return t[0]=e,t[1]=s,t[2]=r,t}function a(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t}function h(t,e,s){return t[0]=e[0]-s[0],t[1]=e[1]-s[1],t[2]=e[2]-s[2],t}function o(t,e,s){return t[0]=e[0]*s[0],t[1]=e[1]*s[1],t[2]=e[2]*s[2],t}function u(t,e,s){return t[0]=e[0]/s[0],t[1]=e[1]/s[1],t[2]=e[2]/s[2],t}function l(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t}function c(t,e){let s=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(s*s+r*r+i*i)}function d(t,e){let s=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return s*s+r*r+i*i}function p(t){let e=t[0],s=t[1],r=t[2];return e*e+s*s+r*r}function m(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function g(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function f(t,e){let s=e[0],r=e[1],i=e[2],n=s*s+r*r+i*i;return n>0&&(n=1/Math.sqrt(n)),t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function x(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function M(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[0],h=s[1],o=s[2];return t[0]=i*o-n*h,t[1]=n*a-r*o,t[2]=r*h-i*a,t}function _(t,e,s,r){let i=e[0],n=e[1],a=e[2];return t[0]=i+r*(s[0]-i),t[1]=n+r*(s[1]-n),t[2]=a+r*(s[2]-a),t}function E(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[3]*r+s[7]*i+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*r+s[4]*i+s[8]*n+s[12])/a,t[1]=(s[1]*r+s[5]*i+s[9]*n+s[13])/a,t[2]=(s[2]*r+s[6]*i+s[10]*n+s[14])/a,t}function w(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[3]*r+s[7]*i+s[11]*n+s[15];return a=a||1,t[0]=(s[0]*r+s[4]*i+s[8]*n)/a,t[1]=(s[1]*r+s[5]*i+s[9]*n)/a,t[2]=(s[2]*r+s[6]*i+s[10]*n)/a,t}function y(t,e,s){let r=e[0],i=e[1],n=e[2];return t[0]=r*s[0]+i*s[3]+n*s[6],t[1]=r*s[1]+i*s[4]+n*s[7],t[2]=r*s[2]+i*s[5]+n*s[8],t}function b(t,e,s){let r=e[0],i=e[1],n=e[2],a=s[0],h=s[1],o=s[2],u=h*n-o*i,l=o*r-a*n,c=a*i-h*r,d=h*c-o*l,p=o*u-a*c,m=a*l-h*u,g=2*s[3];return u*=g,l*=g,c*=g,d*=2,p*=2,m*=2,t[0]=r+u+d,t[1]=i+l+p,t[2]=n+c+m,t}const v=function(){const t=[0,0,0],e=[0,0,0];return function(s,r){i(t,s),i(e,r),f(t,t),f(e,e);let n=x(t,e);return n>1?0:n<-1?Math.PI:Math.acos(n)}}();function A(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(t,e,s)=>{s.r(e),s.d(e,{add:()=>n,copy:()=>r,dot:()=>u,length:()=>h,lerp:()=>l,normalize:()=>o,scale:()=>a,set:()=>i});function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function i(t,e,s,r,i){return t[0]=e,t[1]=s,t[2]=r,t[3]=i,t}function n(t,e,s){return t[0]=e[0]+s[0],t[1]=e[1]+s[1],t[2]=e[2]+s[2],t[3]=e[3]+s[3],t}function a(t,e,s){return t[0]=e[0]*s,t[1]=e[1]*s,t[2]=e[2]*s,t[3]=e[3]*s,t}function h(t){let e=t[0],s=t[1],r=t[2],i=t[3];return Math.sqrt(e*e+s*s+r*r+i*i)}function o(t,e){let s=e[0],r=e[1],i=e[2],n=e[3],a=s*s+r*r+i*i+n*n;return a>0&&(a=1/Math.sqrt(a)),t[0]=s*a,t[1]=r*a,t[2]=i*a,t[3]=n*a,t}function u(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function l(t,e,s,r){let i=e[0],n=e[1],a=e[2],h=e[3];return t[0]=i+r*(s[0]-i),t[1]=n+r*(s[1]-n),t[2]=a+r*(s[2]-a),t[3]=h+r*(s[3]-h),t}}},(function(t){t.h=()=>"65ef9c1b4d2a72f51538"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,