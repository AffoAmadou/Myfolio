/*! For license information please see main.8d4963b11347551eb852.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Navigation.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>s}),Object(function(){var e=new Error("Cannot find module '../classes/Components'");throw e.code="MODULE_NOT_FOUND",e}());var o=n("../../../node_modules/gsap/index.js"),a=n("./app/utils/colors.js");n("./node_modules/lodash/each.js");class s extends(Object(function(){var e=new Error("Cannot find module '../classes/Components'");throw e.code="MODULE_NOT_FOUND",e}())){constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(e)}onChange(e){"about"===e?(o.default.to(this.element,{color:a.COLOR_BRIGHT_GRAY,duration:1.5}),o.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),o.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(o.default.to(this.element,{color:a.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),o.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),o.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75})),console.log(e)}}},"./app/components/Preloader.js":(e,t,n)=>{n.r(t),n.d(t,{default:()=>o}),Object(function(){var e=new Error("Cannot find module '../classes/Components'");throw e.code="MODULE_NOT_FOUND",e}());n("./node_modules/lodash/each.js"),n("./app/utils/text.js");class o extends(Object(function(){var e=new Error("Cannot find module '../classes/Components'");throw e.code="MODULE_NOT_FOUND",e}())){constructor(){super({element:".preloader",elements:{title:".preloader__texxt",number:".preloader__number",numberText:".preloader__number__text"}})}}},"./app/index.js":(e,t,n)=>{n.r(t),Object(function(){var e=new Error("Cannot find module 'pages/About'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'pages/Projects'");throw e.code="MODULE_NOT_FOUND",e}()),Object(function(){var e=new Error("Cannot find module 'pages/Home'");throw e.code="MODULE_NOT_FOUND",e}());var o=n("./node_modules/lodash/each.js"),a=n.n(o),s=n("./app/components/Preloader.js"),i=n("./app/components/Navigation.js"),r=n("./app/components/Canvas/index.js");new class{constructor(){this.createPages()}createNavigation(){this.navigation=new i.default({template:this.template})}createPreloader(){this.preloader=new s.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new r.default}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new Object(function(){var e=new Error("Cannot find module 'pages/About'");throw e.code="MODULE_NOT_FOUND",e}())(),home:new Object(function(){var e=new Error("Cannot find module 'pages/Home'");throw e.code="MODULE_NOT_FOUND",e}())(),projects:new Object(function(){var e=new Error("Cannot find module 'pages/Projects'");throw e.code="MODULE_NOT_FOUND",e}())()},console.log(th),this.page=this.pages[this.template]}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}onResize(){this.canvas&&this.canvas.onResize&&(this.canvas.onResize(),console.log("ddd")),this.page&&this.page.onResize&&this.page.onResize()}async onChange(e,t=!0){await this.page.hide();const n=await window.fetch(e);if(200===n.status){const e=await n.text(),t=document.createElement("div");t.innerHTML=e;const o=t.querySelector(".content");this.content.innerHTML=o.innerHTML,this.template=o.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.navigation.onChange(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}addEventListeners(){window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");a()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:n}=e;this.onChange(n)}}))}}}},(function(e){e.h=()=>"64c3bd01814144823738"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,