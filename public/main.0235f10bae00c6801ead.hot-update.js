/*! For license information please see main.0235f10bae00c6801ead.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/Home/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/ogl/src/core/Program.js"),r=s("./node_modules/ogl/src/core/Mesh.js"),h=s("./app/shaders/home-fragment.glsl"),n=s("./app/shaders/home-vertex.glsl"),o=s("./node_modules/gsap/index.js");class a{constructor({element:e,geometry:t,gl:s,index:i,scene:r,sizes:h}){this.element=e,this.geometry=t,this.gl=s,this.scene=r,this.index=i,this.sizes=h,this.extra={x:0,y:0},this.opacity={current:0,target:0,lerp:.1,multiplier:0},this.createTexture(),this.createProgram(),this.createMesh(),this.createBounds({sizes:this.sizes})}createTexture(){const e=this.element.querySelector(".home__gallery__media__image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:h.default,vertex:n.default,uniforms:{uAlpha:{value:0},uSpeed:{value:0},uViewportSizes:{value:[this.sizes.width,this.sizes.height]},tMap:{value:this.texture}}})}createMesh(){this.mesh=new r.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.scale.x=2}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){this.timeline=o.default.timeline({delay:3.5}),this.timeline.fromTo(this.opacity,{multiplier:0},{multiplier:1})}hide(){o.default.to(this.opacity,{multiplier:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e,t,s){this.updateX(e),this.updateY(),this.program.uniforms.uSpeed.value=t,this.opacity.target=this.index===s?1:.4,this.opacity.current=o.default.utils.interpolate(this.opacity.current,this.opacity.target,this.opacity.lerp),this.program.uniforms.uAlpha.value=this.opacity.multiplier*this.opacity.current}}},"./app/components/Canvas/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});var i=s("./node_modules/lodash/lodash.js"),r=s("./node_modules/ogl/src/core/Transform.js"),h=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./app/components/Canvas/Home/Media.js"),o=s("./node_modules/prefix/index.js"),a=s.n(o),l=s("./node_modules/gsap/index.js");const c=class{constructor({gl:e,scene:t,sizes:s,transition:i}){this.id="home",this.gl=e,this.sizes=s,this.scene=t,this.transition=i,this.group=new r.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.galleryElementWrapper=document.querySelector(".home__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".home__gallery__media"),this.projectsElementsActive="home__article--active",this.projectsElements=document.querySelectorAll(".home__article"),this.projectsTitle=document.querySelectorAll(".home__title__article"),this.projectsTitleActive="home__title__article--active",this.transformPrefix=a()("transform"),this.scroll={current:0,target:0,start:0,lerp:.1,last:0,velocity:1},this.speed={target:0,current:0,lerp:.1},this.createGeometry(),this.createGallery(),this.onResize({sizes:this.sizes}),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new h.Plane(this.gl,{widthSegments:20,heightSegments:20})}createGallery(){this.medias=(0,i.map)(this.mediasElements,((e,t)=>new n.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}async show(){if(this.transition){const{src:e}=this.transition.mesh.program.uniforms.tMap.value.image,t=window.TEXTURES[e],s=this.medias.find((e=>e.texture===t)),r=-s.bounds.left-s.bounds.width/2+window.innerWidth/2;this.update(),this.transition.animate({scale:s.mesh.scale,position:{x:0,y:0,z:0}},(e=>{s.opacity.multiplier=1,(0,i.map)(this.medias,(e=>{s!==e&&e.show()})),this.scroll.current=this.scroll.target=this.scroll.last=this.scroll.start=r}))}else(0,i.map)(this.medias,(e=>e.show()))}hide(){(0,i.map)(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryElementWrapper.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){this.speed.target=1,this.scroll.last=this.scroll.current}onTouchMove({x:e,y:t}){const s=.5*(e.start-e.end);this.scroll.target=this.scroll.last-s}onTouchUp({x:e,y:t}){this.speed.target=0}onWheel({pixelY:e}){this.scroll.target+=e}onChange(e){this.index=e,this.index===this.mediasElements.length&&(this.index=this.index-1);const t=parseInt(this.mediasElements[this.index].getAttribute("data-index"));(0,i.map)(this.projectsElements,((e,s)=>{s===t?e.classList.add(this.projectsElementsActive):e.classList.remove(this.projectsElementsActive)})),(0,i.map)(this.projectsTitle,((e,s)=>{s===t?e.classList.add(this.projectsTitleActive):e.classList.remove(this.projectsTitleActive)}))}update(){this.speed.current=l.default.utils.interpolate(this.speed.current,this.speed.target,this.speed.lerp),this.scroll.target=l.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=l.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last=this.scroll.current;const e=Math.floor(Math.abs((this.scroll.current-this.medias[0].bounds.width/2)/this.scroll.limit)*(this.medias.length-1));this.index!==e&&this.onChange(e),(0,i.map)(this.medias,((e,t)=>{e.update(this.scroll.current,this.speed.current,this.index),e.mesh.position.y+=40*Math.cos(e.mesh.position.x/this.sizes.width*Math.PI*.1)-40}))}destroy(){this.scene.removeChild(this.group)}}},"./app/shaders/home-fragment.glsl":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\n\nvarying vec2 vUv;\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    gl_FragColor = texture;\n\n    gl_FragColor.a = uAlpha;\n}"},"./app/shaders/home-vertex.glsl":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});const i="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvarying vec4 vPosition;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    vPosition = newPosition;\n   \n\n    gl_Position = projectionMatrix * newPosition;\n    \n}"}},(function(e){e.h=()=>"37d72206d5671e4892ce"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TCxLQUFLK0MsT0FBT3pDLE9BQVFOLEtBQUsrQyxPQUFPeEMsTUFFbEdQLEtBQUsyRCxlQUFlOEMsTUFBTXpHLEtBQUtvRSxpQkFBb0IsY0FBYXBFLEtBQUsrQyxPQUFPMUMsYUFHNUVMLEtBQUsrQyxPQUFPd0IsS0FBT3ZFLEtBQUsrQyxPQUFPMUMsUUFFL0IsTUFBTVIsRUFBUTZHLEtBQUtDLE1BQU1ELEtBQUtFLEtBQUs1RyxLQUFLK0MsT0FBTzFDLFFBQVVMLEtBQUs4RSxPQUFPLEdBQUczQyxPQUFPUCxNQUFRLEdBQUs1QixLQUFLK0MsT0FBT3lDLFFBQVV4RixLQUFLOEUsT0FBT29CLE9BQVMsSUFHbklsRyxLQUFLSCxRQUFVQSxHQUNmRyxLQUFLaUcsU0FBU3BHLElBR2xCa0YsRUFBQUEsRUFBQUEsS0FBSS9FLEtBQUs4RSxRQUFRLENBQUNHLEVBQU9wRixLQUNyQm9GLEVBQU01QixPQUFPckQsS0FBSytDLE9BQU8xQyxRQUFTTCxLQUFLc0QsTUFBTWpELFFBQVNMLEtBQUtILE9BRTNEb0YsRUFBTWxELEtBQUtvQixTQUFTaEQsR0FBNEUsR0FBdkV1RyxLQUFLRyxJQUFLNUIsRUFBTWxELEtBQUtvQixTQUFTakQsRUFBSUYsS0FBS0QsTUFBTTZCLE1BQVM4RSxLQUFLSSxHQUFLLElBQVksRUFBckcsR0FJUCxDQUtEQyxVQUNJL0csS0FBS0YsTUFBTWtILFlBQVloSCxLQUFLeUQsTUFDL0IsK0VDOU5MLHlWQ0FBLHFmQ0FBd0QsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0ZXIvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvSG9tZS9NZWRpYS5qcyIsIndlYnBhY2s6Ly9zdGFydGVyLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL0hvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RhcnRlci8uL2FwcC9zaGFkZXJzL2hvbWUtZnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly9zdGFydGVyLy4vYXBwL3NoYWRlcnMvaG9tZS12ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly9zdGFydGVyL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXNoLCBQcm9ncmFtIH0gZnJvbSAnb2dsJ1xyXG5cclxuaW1wb3J0IGZyYWdtZW50IGZyb20gJ3NoYWRlcnMvaG9tZS1mcmFnbWVudC5nbHNsJ1xyXG5pbXBvcnQgdmVydGV4IGZyb20gJ3NoYWRlcnMvaG9tZS12ZXJ0ZXguZ2xzbCdcclxuXHJcbmltcG9ydCBHU0FQIGZyb20gJ2dzYXAnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZWRpYSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQsIGdlb21ldHJ5LCBnbCwgaW5kZXgsIHNjZW5lLCBzaXplcyB9KSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeVxyXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleFxyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgICAgIHRoaXMuZXh0cmEgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDBcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50OiAwLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgICAgICAgIGxlcnA6IDAuMSxcclxuICAgICAgICAgICAgbXVsdGlwbGllcjogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcclxuICAgICAgICB0aGlzLmNyZWF0ZVByb2dyYW0oKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlTWVzaCgpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVCb3VuZHMoe1xyXG4gICAgICAgICAgICBzaXplczogdGhpcy5zaXplc1xyXG4gICAgICAgIH0pXHJcblxyXG5cclxuXHJcblxyXG4gICAgfVxyXG4gICAgY3JlYXRlVGV4dHVyZSgpIHtcclxuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZV9fZ2FsbGVyeV9fbWVkaWFfX2ltYWdlJylcclxuICAgICAgICB0aGlzLnRleHR1cmUgPSB3aW5kb3cuVEVYVFVSRVNbaW1hZ2UuZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpXVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVByb2dyYW0oKSB7XHJcblxyXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG5ldyBQcm9ncmFtKHRoaXMuZ2wsIHtcclxuICAgICAgICAgICAgZnJhZ21lbnQsXHJcbiAgICAgICAgICAgIHZlcnRleCxcclxuICAgICAgICAgICAgdW5pZm9ybXM6IHtcclxuICAgICAgICAgICAgICAgIHVBbHBoYTogeyB2YWx1ZTogMCB9LFxyXG4gICAgICAgICAgICAgICAgdVNwZWVkOiB7IHZhbHVlOiAwIH0sXHJcbiAgICAgICAgICAgICAgICB1Vmlld3BvcnRTaXplczogeyB2YWx1ZTogW3RoaXMuc2l6ZXMud2lkdGgsIHRoaXMuc2l6ZXMuaGVpZ2h0XSB9LFxyXG4gICAgICAgICAgICAgICAgdE1hcDogeyB2YWx1ZTogdGhpcy50ZXh0dXJlIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZU1lc2goKSB7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbmV3IE1lc2godGhpcy5nbCwge1xyXG4gICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgICAgICAgcHJvZ3JhbTogdGhpcy5wcm9ncmFtXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgdGhpcy5tZXNoLnNldFBhcmVudCh0aGlzLnNjZW5lKVxyXG4gICAgICAgIHRoaXMubWVzaC5zY2FsZS54ID0gMlxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJvdW5kcyh7IHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsZSgpXHJcbiAgICAgICAgdGhpcy51cGRhdGVYKClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBBbmltYXRpb25zXHJcbiAgICAgKi9cclxuXHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLnRpbWVsaW5lID0gR1NBUC50aW1lbGluZShcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZGVsYXk6IDMuNVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG5cclxuICAgICAgICB0aGlzLnRpbWVsaW5lLmZyb21Ubyh0aGlzLm9wYWNpdHksIHtcclxuICAgICAgICAgICAgbXVsdGlwbGllcjogMFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgbXVsdGlwbGllcjogMVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgR1NBUC50byh0aGlzLm9wYWNpdHksIHtcclxuICAgICAgICAgICAgbXVsdGlwbGllcjogMFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAgKiBFdmVudHNcclxuICAgICAgKi9cclxuICAgIG9uUmVzaXplKHNpemVzLCBzY3JvbGwpIHtcclxuICAgICAgICB0aGlzLmV4dHJhID0ge1xyXG4gICAgICAgICAgICB4OiAwLFxyXG4gICAgICAgICAgICB5OiAwXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3JlYXRlQm91bmRzKHNpemVzKVxyXG4gICAgICAgIHRoaXMudXBkYXRlWChzY3JvbGwgJiYgc2Nyb2xsLngpXHJcbiAgICAgICAgdGhpcy51cGRhdGVZKHNjcm9sbCAmJiBzY3JvbGwueSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExPT1BcclxuICAgICAqL1xyXG4gICAgdXBkYXRlU2NhbGUoKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuYm91bmRzLndpZHRoIC8gd2luZG93LmlubmVyV2lkdGhcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm91bmRzLmhlaWdodCAvIHdpbmRvdy5pbm5lckhlaWdodFxyXG5cclxuICAgICAgICB0aGlzLm1lc2guc2NhbGUueCA9IHRoaXMuc2l6ZXMud2lkdGggKiB0aGlzLndpZHRoXHJcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSB0aGlzLnNpemVzLmhlaWdodCAqIHRoaXMuaGVpZ2h0XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlWCh4ID0gMCkge1xyXG4gICAgICAgIHRoaXMueCA9ICh0aGlzLmJvdW5kcy5sZWZ0ICsgeCkgLyB3aW5kb3cuaW5uZXJXaWR0aFxyXG4gICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi54ID0gKC10aGlzLnNpemVzLndpZHRoIC8gMikgKyAodGhpcy5tZXNoLnNjYWxlLnggLyAyKSArICh0aGlzLnggKiB0aGlzLnNpemVzLndpZHRoKSArIHRoaXMuZXh0cmEueFxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVkoeSA9IDApIHtcclxuICAgICAgICB0aGlzLnkgPSAodGhpcy5ib3VuZHMudG9wICsgeSkgLyB3aW5kb3cuaW5uZXJIZWlnaHRcclxuICAgICAgICB0aGlzLm1lc2gucG9zaXRpb24ueSA9ICh0aGlzLnNpemVzLmhlaWdodCAvIDIpIC0gKHRoaXMubWVzaC5zY2FsZS55IC8gMikgLSAodGhpcy55ICogdGhpcy5zaXplcy5oZWlnaHQpICsgdGhpcy5leHRyYS55XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHNjcm9sbCwgc3BlZWQsIGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVYKHNjcm9sbClcclxuICAgICAgICB0aGlzLnVwZGF0ZVkoKVxyXG5cclxuICAgICAgICB0aGlzLnByb2dyYW0udW5pZm9ybXMudVNwZWVkLnZhbHVlID0gc3BlZWRcclxuXHJcbiAgICAgICAgdGhpcy5vcGFjaXR5LnRhcmdldCA9IHRoaXMuaW5kZXggPT09IGluZGV4ID8gMSA6IDAuNFxyXG4gICAgICAgIHRoaXMub3BhY2l0eS5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLm9wYWNpdHkuY3VycmVudCwgdGhpcy5vcGFjaXR5LnRhcmdldCwgdGhpcy5vcGFjaXR5LmxlcnApXHJcblxyXG4gICAgICAgIHRoaXMucHJvZ3JhbS51bmlmb3Jtcy51QWxwaGEudmFsdWUgPSB0aGlzLm9wYWNpdHkubXVsdGlwbGllciAqIHRoaXMub3BhY2l0eS5jdXJyZW50XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBtYXAgfSBmcm9tIFwibG9kYXNoXCJcclxuaW1wb3J0IHsgUGxhbmUsIFRyYW5zZm9ybSB9IGZyb20gXCJvZ2xcIlxyXG5pbXBvcnQgTWVkaWEgZnJvbSBcIi4vTWVkaWFcIlxyXG5pbXBvcnQgUHJlZml4IGZyb20gXCJwcmVmaXhcIlxyXG5cclxuaW1wb3J0IEdTQVAgZnJvbSAnZ3NhcCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgZ2wsIHNjZW5lLCBzaXplcywgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9ICdob21lJ1xyXG4gICAgICAgIHRoaXMuZ2wgPSBnbFxyXG4gICAgICAgIHRoaXMuc2l6ZXMgPSBzaXplc1xyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgICAgIHRoaXMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25cclxuICAgICAgICB0aGlzLmdyb3VwID0gbmV3IFRyYW5zZm9ybSgpXHJcblxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaG9tZV9fZ2FsbGVyeScpXHJcblxyXG4gICAgICAgIHRoaXMuZ2FsbGVyeUVsZW1lbnRXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhvbWVfX2dhbGxlcnlfX3dyYXBwZXInKVxyXG5cclxuICAgICAgICB0aGlzLm1lZGlhc0VsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhvbWVfX2dhbGxlcnlfX21lZGlhJylcclxuXHJcbiAgICAgICAgdGhpcy5wcm9qZWN0c0VsZW1lbnRzQWN0aXZlID0gJ2hvbWVfX2FydGljbGUtLWFjdGl2ZSdcclxuICAgICAgICB0aGlzLnByb2plY3RzRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaG9tZV9fYXJ0aWNsZScpXHJcblxyXG4gICAgICAgIHRoaXMucHJvamVjdHNUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ob21lX190aXRsZV9fYXJ0aWNsZScpXHJcbiAgICAgICAgdGhpcy5wcm9qZWN0c1RpdGxlQWN0aXZlID0gJ2hvbWVfX3RpdGxlX19hcnRpY2xlLS1hY3RpdmUnXHJcblxyXG5cclxuICAgICAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeCgndHJhbnNmb3JtJyk7XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsID0ge1xyXG4gICAgICAgICAgICBjdXJyZW50OiAwLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgICAgICAgIHN0YXJ0OiAwLFxyXG4gICAgICAgICAgICBsZXJwOiAwLjEsXHJcbiAgICAgICAgICAgIGxhc3Q6IDAsXHJcbiAgICAgICAgICAgIHZlbG9jaXR5OiAxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNwZWVkID0ge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IDAsXHJcbiAgICAgICAgICAgIGN1cnJlbnQ6IDAsXHJcbiAgICAgICAgICAgIGxlcnA6IDAuMVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcclxuICAgICAgICB0aGlzLmNyZWF0ZUdhbGxlcnkoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKHtcclxuICAgICAgICAgICAgc2l6ZXM6IHRoaXMuc2l6ZXNcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuZ3JvdXAuc2V0UGFyZW50KHRoaXMuc2NlbmUpXHJcblxyXG4gICAgICAgIHRoaXMuc2hvdygpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlR2VvbWV0cnkoKSB7XHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IG5ldyBQbGFuZSh0aGlzLmdsLCB7XHJcbiAgICAgICAgICAgIHdpZHRoU2VnbWVudHM6IDIwLFxyXG4gICAgICAgICAgICBoZWlnaHRTZWdtZW50czogMjBcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgY3JlYXRlR2FsbGVyeSgpIHtcclxuICAgICAgICB0aGlzLm1lZGlhcyA9IG1hcCh0aGlzLm1lZGlhc0VsZW1lbnRzLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBNZWRpYSh7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IHRoaXMuZ2VvbWV0cnksXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIGdsOiB0aGlzLmdsLFxyXG4gICAgICAgICAgICAgICAgc2NlbmU6IHRoaXMuZ3JvdXAsXHJcbiAgICAgICAgICAgICAgICBzaXplczogdGhpcy5zaXplc1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICogQW5pbWF0aW9uc1xyXG4gICAqL1xyXG4gICAgYXN5bmMgc2hvdygpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICAvLyB0aGlzLm1lZGlhLm9wYWNpdHkubXVsdGlwbGllciA9IDBcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHsgc3JjIH0gPSB0aGlzLnRyYW5zaXRpb24ubWVzaC5wcm9ncmFtLnVuaWZvcm1zLnRNYXAudmFsdWUuaW1hZ2VcclxuICAgICAgICAgICAgY29uc3QgdGV4dHVyZSA9IHdpbmRvdy5URVhUVVJFU1tzcmNdXHJcbiAgICAgICAgICAgIGNvbnN0IG1lZGlhID0gdGhpcy5tZWRpYXMuZmluZChtZWRpYSA9PiBtZWRpYS50ZXh0dXJlID09PSB0ZXh0dXJlKVxyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbCA9IC1tZWRpYS5ib3VuZHMubGVmdCAtIG1lZGlhLmJvdW5kcy53aWR0aCAvIDIgKyB3aW5kb3cuaW5uZXJXaWR0aCAvIDJcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb24uYW5pbWF0ZShcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogbWVkaWEubWVzaC5zY2FsZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogeyB4OiAwLCB5OiAwLCB6OiAwIH0sXHJcbiAgICAgICAgICAgICAgICB9LCBfID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBtZWRpYS5vcGFjaXR5Lm11bHRpcGxpZXIgPSAxXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1hcCh0aGlzLm1lZGlhcywgaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZWRpYSAhPT0gaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zaG93KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSB0aGlzLnNjcm9sbC50YXJnZXQgPSB0aGlzLnNjcm9sbC5sYXN0ID0gdGhpcy5zY3JvbGwuc3RhcnQgPSBzY3JvbGxcclxuXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtYXAodGhpcy5tZWRpYXMsIG1lZGlhID0+IG1lZGlhLnNob3coKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5oaWRlKCkpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnRzXHJcbiAgICAgKi9cclxuICAgIG9uUmVzaXplKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zaXplcyA9IGV2ZW50LnNpemVzXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLmdhbGxlcnlFbGVtZW50V3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG5cclxuICAgICAgICB0aGlzLnNjcm9sbC5sYXN0ID0gdGhpcy5zY3JvbGwudGFyZ2V0ID0gMFxyXG5cclxuXHJcbiAgICAgICAgbWFwKHRoaXMubWVkaWFzLCBtZWRpYSA9PiBtZWRpYS5vblJlc2l6ZShldmVudCwgdGhpcy5zY3JvbGwpKVxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmxpbWl0ID0gdGhpcy5ib3VuZHMud2lkdGggLSB0aGlzLm1lZGlhc1swXS5lbGVtZW50LmNsaWVudFdpZHRoXHJcbiAgICB9XHJcblxyXG4gICAgb25Ub3VjaERvd24oeyB4LCB5IH0pIHtcclxuICAgICAgICB0aGlzLnNwZWVkLnRhcmdldCA9IDFcclxuICAgICAgICB0aGlzLnNjcm9sbC5sYXN0ID0gdGhpcy5zY3JvbGwuY3VycmVudFxyXG4gICAgfVxyXG4gICAgb25Ub3VjaE1vdmUoeyB4LCB5IH0pIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9ICh4LnN0YXJ0IC0geC5lbmQpKi41XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9ICh0aGlzLnNjcm9sbC5sYXN0IC0gZGlzdGFuY2UpIFxyXG4gICAgfVxyXG4gICAgb25Ub3VjaFVwKHsgeCwgeSB9KSB7XHJcbiAgICAgICAgdGhpcy5zcGVlZC50YXJnZXQgPSAwXHJcbiAgICB9XHJcblxyXG4gICAgb25XaGVlbCh7IHBpeGVsWSB9KSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGwudGFyZ2V0ICs9IHBpeGVsWVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqICpDaGFuZ2luZ1xyXG4gICAgICovXHJcblxyXG4gICAgb25DaGFuZ2UoaW5kZXgpIHtcclxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXhcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IHRoaXMubWVkaWFzRWxlbWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmluZGV4IC0gMVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzZWxlY3RlZFByb2plY3QgPSBwYXJzZUludCh0aGlzLm1lZGlhc0VsZW1lbnRzW3RoaXMuaW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpKVxyXG5cclxuICAgICAgICBtYXAodGhpcy5wcm9qZWN0c0VsZW1lbnRzLCAoZWxlbWVudCwgZWxlbWVudEluZGV4KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudEluZGV4ID09PSBzZWxlY3RlZFByb2plY3QpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLnByb2plY3RzRWxlbWVudHNBY3RpdmUpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5wcm9qZWN0c0VsZW1lbnRzQWN0aXZlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcblxyXG5cclxuICAgICAgICBtYXAodGhpcy5wcm9qZWN0c1RpdGxlLCAoZWxlbWVudCwgZWxlbWVudEluZGV4KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudEluZGV4ID09PSBzZWxlY3RlZFByb2plY3QpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLnByb2plY3RzVGl0bGVBY3RpdmUpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5wcm9qZWN0c1RpdGxlQWN0aXZlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVVBEQVRFXHJcbiAgICAgKi9cclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5zcGVlZC5jdXJyZW50ID0gR1NBUC51dGlscy5pbnRlcnBvbGF0ZSh0aGlzLnNwZWVkLmN1cnJlbnQsIHRoaXMuc3BlZWQudGFyZ2V0LCB0aGlzLnNwZWVkLmxlcnApXHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLnRhcmdldCA9IEdTQVAudXRpbHMuY2xhbXAoLXRoaXMuc2Nyb2xsLmxpbWl0LCAwLCB0aGlzLnNjcm9sbC50YXJnZXQpXHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsLmN1cnJlbnQgPSBHU0FQLnV0aWxzLmludGVycG9sYXRlKHRoaXMuc2Nyb2xsLmN1cnJlbnQsIHRoaXMuc2Nyb2xsLnRhcmdldCwgdGhpcy5zY3JvbGwubGVycClcclxuXHJcbiAgICAgICAgdGhpcy5nYWxsZXJ5RWxlbWVudC5zdHlsZVt0aGlzLnRyYW5zZm9ybVByZWZpeF0gPSBgdHJhbnNsYXRlWCgke3RoaXMuc2Nyb2xsLmN1cnJlbnR9cHgpYFxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGwubGFzdCA9IHRoaXMuc2Nyb2xsLmN1cnJlbnRcclxuXHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKE1hdGguYWJzKCh0aGlzLnNjcm9sbC5jdXJyZW50IC0gdGhpcy5tZWRpYXNbMF0uYm91bmRzLndpZHRoIC8gMikgLyB0aGlzLnNjcm9sbC5saW1pdCkgKiAodGhpcy5tZWRpYXMubGVuZ3RoIC0gMSkpXHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbmRleCAhPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShpbmRleClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG1hcCh0aGlzLm1lZGlhcywgKG1lZGlhLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBtZWRpYS51cGRhdGUodGhpcy5zY3JvbGwuY3VycmVudCwgdGhpcy5zcGVlZC5jdXJyZW50LCB0aGlzLmluZGV4KVxyXG5cclxuICAgICAgICAgICAgbWVkaWEubWVzaC5wb3NpdGlvbi55ICs9IE1hdGguY29zKChtZWRpYS5tZXNoLnBvc2l0aW9uLnggLyB0aGlzLnNpemVzLndpZHRoKSAqIE1hdGguUEkgKiAwLjEpICogNDAgLSA0MFxyXG4gICAgICAgIH0pXHJcblxyXG5cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGVkc3Ryb3lcclxuICAgICAqL1xyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5yZW1vdmVDaGlsZCh0aGlzLmdyb3VwKVxyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuI2RlZmluZSBHTFNMSUZZIDFcXG5cXG51bmlmb3JtIGZsb2F0IHVBbHBoYTtcXG51bmlmb3JtIHNhbXBsZXIyRCB0TWFwO1xcblxcbnZhcnlpbmcgdmVjNCB2UG9zaXRpb247XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG52b2lkIG1haW4oKSB7XFxuICAgIHZlYzQgdGV4dHVyZSA9IHRleHR1cmUyRCh0TWFwLCB2VXYpO1xcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlO1xcblxcbiAgICBnbF9GcmFnQ29sb3IuYSA9IHVBbHBoYTtcXG59XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCIjZGVmaW5lIEdMU0xJRlkgMVxcbiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODk3OTMyMzg0NjI2NDMzODMyNzk1XFxuXFxuYXR0cmlidXRlIHZlYzIgdXY7XFxuYXR0cmlidXRlIHZlYzMgcG9zaXRpb247XFxuXFxudW5pZm9ybSBmbG9hdCB1U3BlZWQ7XFxudW5pZm9ybSB2ZWMyIHVWaWV3cG9ydFNpemVzO1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XFxuXFxudmFyeWluZyB2ZWMyIHZVdjtcXG5cXG52YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcblxcbnZvaWQgbWFpbigpIHtcXG4gICAgdlV2ID0gdXY7XFxuXFxuICAgIHZlYzQgbmV3UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xcblxcbiAgICB2UG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcXG4gICBcXG5cXG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbmV3UG9zaXRpb247XFxuICAgIFxcbn1cIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIzN2Q3MjIwNmQ1NjcxZTQ4OTJjZVwiKSJdLCJuYW1lcyI6WyJNZWRpYSIsImNvbnN0cnVjdG9yIiwiZWxlbWVudCIsImdlb21ldHJ5IiwiZ2wiLCJpbmRleCIsInNjZW5lIiwic2l6ZXMiLCJ0aGlzIiwiZXh0cmEiLCJ4IiwieSIsIm9wYWNpdHkiLCJjdXJyZW50IiwidGFyZ2V0IiwibGVycCIsIm11bHRpcGxpZXIiLCJjcmVhdGVUZXh0dXJlIiwiY3JlYXRlUHJvZ3JhbSIsImNyZWF0ZU1lc2giLCJjcmVhdGVCb3VuZHMiLCJpbWFnZSIsInF1ZXJ5U2VsZWN0b3IiLCJ0ZXh0dXJlIiwid2luZG93IiwiVEVYVFVSRVMiLCJnZXRBdHRyaWJ1dGUiLCJwcm9ncmFtIiwiUHJvZ3JhbSIsImZyYWdtZW50IiwidmVydGV4IiwidW5pZm9ybXMiLCJ1QWxwaGEiLCJ2YWx1ZSIsInVTcGVlZCIsInVWaWV3cG9ydFNpemVzIiwid2lkdGgiLCJoZWlnaHQiLCJ0TWFwIiwibWVzaCIsIk1lc2giLCJzZXRQYXJlbnQiLCJzY2FsZSIsImJvdW5kcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInVwZGF0ZVNjYWxlIiwidXBkYXRlWCIsInVwZGF0ZVkiLCJzaG93IiwidGltZWxpbmUiLCJHU0FQIiwiZGVsYXkiLCJmcm9tVG8iLCJoaWRlIiwib25SZXNpemUiLCJzY3JvbGwiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJsZWZ0IiwicG9zaXRpb24iLCJ0b3AiLCJ1cGRhdGUiLCJzcGVlZCIsInRyYW5zaXRpb24iLCJpZCIsImdyb3VwIiwiVHJhbnNmb3JtIiwiZ2FsbGVyeUVsZW1lbnQiLCJkb2N1bWVudCIsImdhbGxlcnlFbGVtZW50V3JhcHBlciIsIm1lZGlhc0VsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsInByb2plY3RzRWxlbWVudHNBY3RpdmUiLCJwcm9qZWN0c0VsZW1lbnRzIiwicHJvamVjdHNUaXRsZSIsInByb2plY3RzVGl0bGVBY3RpdmUiLCJ0cmFuc2Zvcm1QcmVmaXgiLCJQcmVmaXgiLCJzdGFydCIsImxhc3QiLCJ2ZWxvY2l0eSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyeSIsIlBsYW5lIiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwibWVkaWFzIiwibWFwIiwic3JjIiwibWVkaWEiLCJmaW5kIiwiYW5pbWF0ZSIsInoiLCJfIiwiaXRlbSIsImV2ZW50IiwibGltaXQiLCJjbGllbnRXaWR0aCIsIm9uVG91Y2hEb3duIiwib25Ub3VjaE1vdmUiLCJkaXN0YW5jZSIsImVuZCIsIm9uVG91Y2hVcCIsIm9uV2hlZWwiLCJwaXhlbFkiLCJvbkNoYW5nZSIsImxlbmd0aCIsInNlbGVjdGVkUHJvamVjdCIsInBhcnNlSW50IiwiZWxlbWVudEluZGV4IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwic3R5bGUiLCJNYXRoIiwiZmxvb3IiLCJhYnMiLCJjb3MiLCJQSSIsImRlc3Ryb3kiLCJyZW1vdmVDaGlsZCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJoIl0sInNvdXJjZVJvb3QiOiIifQ==