/*! For license information please see main.0d829036350913ef02cc.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/classes/Button.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var i=s("./app/classes/Component.js"),n=s("./node_modules/gsap/index.js");class h extends i.default{constructor({element:e}){super({element:e}),this.timeline=n.default.timeline()}onMouseEnter(){console.log("enter")}onMouseLeave(){console.log("leave")}addEventListeners(){this.element.addEventListener("mouseenter",this.onMouseEnter),this.element.addEventListener("mouseenter",this.onMouseLeave)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnter),this.element.removeEventListener("mouseenter",this.onMouseLeave)}}},"./app/components/Canvas/Home/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./node_modules/ogl/src/core/Texture.js"),n=s("./node_modules/ogl/src/core/Program.js"),h=s("./node_modules/ogl/src/core/Mesh.js"),o=s("./app/shaders/plane-fragment.glsl"),a=s("./app/shaders/plane-vertex.glsl");class r{constructor({element:e,geometry:t,gl:s,index:i,scene:n,sizes:h}){this.element=e,this.geometry=t,this.gl=s,this.scene=n,this.index=i,this.sizes=h,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new i.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=e=>this.texture.image=this.image}createProgram(){this.program=new n.Program(this.gl,{fragment:o.default,vertex:a.default,uniforms:{tMap:{value:this.texture}}})}createMesh(){this.mesh=new h.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.scale.x=2}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.bounds&&this.updateX(e.x)}}},"./app/components/Canvas/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./node_modules/lodash/lodash.js"),n=s("./node_modules/ogl/src/core/Transform.js"),h=s("./node_modules/ogl/src/extras/Plane.js"),o=s("./app/components/Canvas/Home/Media.js"),a=s("./node_modules/gsap/index.js");class r{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.group=new n.Transform,this.galleryElement=document.querySelector(".home__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.createGeometry(),this.createGallery(),this.group.setParent(t),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scrollCurrent={x:0,y:0},this.scroll={x:0,y:0}}createGeometry(){this.geometry=new h.Plane(this.gl)}createGallery(){this.medias=(0,i.map)(this.mediasElements,((e,t)=>new o.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll)))}onTouchDown({x:e,y:t}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:e,y:t}){const s=e.start-e.end,i=t.start-t.end;this.x.target=this.scrollCurrent.x-s,this.y.target=this.scrollCurrent.y-i}onTouchUp({x:e,y:t}){}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.y.target+=t}update(){this.galleryBounds&&(this.x.current=a.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=a.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="top":this.scroll.y>this.y.current&&(this.y.direction="bottom"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,(0,i.map)(this.medias,((e,t)=>{const s=e.mesh.scale.x/2,i=e.mesh.scale.y/2;if("left"===this.x.direction){e.mesh.position.x+s<-this.sizes.width/2&&(e.extra.x+=this.gallerySizes.width)}else if("right"===this.x.direction){e.mesh.position.x-s>this.sizes.width/2&&(e.extra.x-=this.gallerySizes.width)}if("top"===this.y.direction){e.mesh.position.y+i<-this.sizes.width/2&&(e.extra.y+=this.gallerySizes.height)}else if("bottom"===this.y.direction){e.mesh.position.y-i>this.sizes.width/2&&(e.extra.y-=this.gallerySizes.height)}e.update(this.scroll)})))}}},"./app/components/Canvas/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/ogl/src/core/Renderer.js"),n=s("./node_modules/ogl/src/core/Camera.js"),h=s("./node_modules/ogl/src/core/Transform.js"),o=s("./app/components/Canvas/Home/index.js");class a{constructor(){this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.createHome()}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new n.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new h.Transform}createHome(){this.home=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,s=t*this.camera.aspect;this.sizes={height:t,width:s},this.home&&this.home.onResize({sizes:this.sizes})}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY,this.home&&this.home.onTouchDown({x:this.x,y:this.y})}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,s=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=s,this.x.distance=this.x.start-this.x.end,this.y.distance=this.y.start-this.y.end,this.home&&this.home.onTouchMove({x:this.x,y:this.y})}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,s=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=s,this.x.distance=this.x.start-this.x.end,this.y.distance=this.y.start-this.y.end,this.home&&this.home.onTouchMove({x:this.x,y:this.y})}onWheel(e){this.home&&this.home.onWheel(e)}update(){this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/index.js":(e,t,s)=>{s.r(t);var i=s("./app/pages/About/index.js"),n=s("./app/pages/Projects/index.js"),h=s("./node_modules/lodash/each.js"),o=s.n(h),a=s("./app/pages/Home/index.js"),r=s("./app/components/Preloader.js"),c=(s("./app/classes/Detection.js"),s("./node_modules/normalize-wheel/index.js")),d=s.n(c),l=s("./app/components/Canvas/index.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createPages(),this.createCanvas(),this.addEventListeners(),this.addLinkListeners(),this.update()}createPreloader(){this.preloader=new r.default,this.preloader.once("complete",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new l.default}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,home:new a.default,project:new n.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){await this.page.hide();const s=await window.fetch(e);if(200===s.status){const i=await s.text(),n=document.createElement("div");t&&window.history.pushState({},"",e),n.innerHTML=i;const h=n.querySelector(".content");this.template=h.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=h.innerHTML,this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),window.requestAnimationFrame((e=>{this.page&&this.page.onResize&&this.page.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=d()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");o()(e,(e=>{e.onclick=t=>{const{href:s}=e;t.preventDefault(),this.onChange({url:s})}}))}}}},(function(e){e.h=()=>"7adf65cfe8d4d1fb0e46"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,