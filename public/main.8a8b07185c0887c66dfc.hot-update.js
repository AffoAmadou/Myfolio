/*! For license information please see main.8a8b07185c0887c66dfc.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/Project/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});var i=s("./node_modules/ogl/src/core/Texture.js"),h=s("./node_modules/ogl/src/core/Program.js"),o=s("./node_modules/ogl/src/core/Mesh.js"),n=s("./app/shaders/plane-fragment.glsl"),a=s("./app/shaders/plane-vertex.glsl"),r=s("./node_modules/gsap/index.js");class c{constructor({element:e,geometry:t,gl:s,index:i,scene:h,sizes:o}){this.element=e,this.geometry=t,this.gl=s,this.scene=h,this.index=i,this.sizes=o,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new i.Texture(this.gl);const e=this.element.querySelector("img");this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=e.getAttribute("data-src"),this.image.onload=e=>this.texture.image=this.image}createProgram(){this.program=new h.Program(this.gl,{fragment:n.default,vertex:a.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new o.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){r.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){r.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra=0,this.createBounds(e),this.updateX(t),this.updateY(0)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height}update(e){this.bounds&&(this.updateX(e),this.updateY(0))}}},"./app/components/Canvas/Project/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/ogl/src/core/Transform.js"),o=s("./node_modules/ogl/src/extras/Plane.js"),n=s("./app/components/Canvas/Project/Gallery.js");const a=class{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.group=new h.Transform,this.createGeometry(),this.createGalleries(),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new o.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".project__mobile"),this.galleries=(0,i.map)(this.galleriesElements,((e,t)=>new n.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.galleries,(e=>e.show()))}hide(){(0,i.map)(this.galleries,(e=>e.hide()))}onResize(e){(0,i.map)(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){(0,i.map)(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){(0,i.map)(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){(0,i.map)(this.galleries,(t=>t.onTouchUp(e)))}onWheel({pixelX:e,pixelY:t}){}update(){(0,i.map)(this.galleries,(e=>e.update()))}destroy(){(0,i.map)(this.galleries,(e=>e.destroy()))}}},"./app/components/Canvas/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});s("./node_modules/lodash/lodash.js");var i=s("./node_modules/ogl/src/core/Renderer.js"),h=s("./node_modules/ogl/src/core/Camera.js"),o=s("./node_modules/ogl/src/core/Transform.js"),n=s("./app/components/Canvas/Home/index.js"),a=s("./app/components/Canvas/Project/index.js");class r{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.onChangeEnd(this.template)}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new h.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new o.Transform}createHome(){this.home=new n.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createProject(){this.project=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyProject(){this.project&&(this.project.destroy(),this.project=null)}onChangeStart(){this.home&&this.home.hide(),this.project&&this.project.hide()}onChangeEnd(e){"home"===e?this.createHome():this.destroyHome(),"project"===e?this.createProject():this.destroyProject()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,s=t*this.camera.aspect;this.sizes={height:t,width:s};const i={sizes:this.sizes};this.project&&this.project.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.project&&this.project.onTouchDown(t),this.home&&this.home.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,s=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.project&&this.project.onTouchMove(i),this.home&&this.home.onTouchMove(i)}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,s=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.project&&this.project.onTouchUp(i),this.home&&this.home.onTouchUp(i)}onWheel(e){this.home&&this.home.onWheel(e)}update(){this.project&&this.project.update(),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/index.js":(e,t,s)=>{s.r(t);var i=s("./app/pages/About/index.js"),h=s("./app/pages/Projects/index.js"),o=s("./node_modules/lodash/each.js"),n=s.n(o),a=s("./app/pages/Home/index.js"),r=s("./app/components/Preloader.js"),c=(s("./app/classes/Detection.js"),s("./node_modules/normalize-wheel/index.js")),d=s.n(c),l=s("./app/components/Canvas/index.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createPages(),this.createCanvas(),this.addEventListeners(),this.addLinkListeners(),this.update()}createPreloader(){this.preloader=new r.default,this.preloader.once("complete",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new l.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,home:new a.default,project:new h.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(this.template),await this.page.hide();const s=await window.fetch(e);if(200===s.status){const i=await s.text(),h=document.createElement("div");t&&window.history.pushState({},"",e),h.innerHTML=i;const o=h.querySelector(".content");this.template=o.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=o.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),window.requestAnimationFrame((e=>{this.page&&this.page.onResize&&this.page.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=d()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.canvas&&this.canvas.update&&this.canvas.update(),this.page&&this.page.update&&this.page.update(),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");n()(e,(e=>{e.onclick=t=>{const{href:s}=e;t.preventDefault(),this.onChange({url:s})}}))}}},"./styles/index.scss":(e,t,s)=>{s.r(t);var i=s("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)}},(function(e){e.h=()=>"aa4addd2e3810331cd29"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,