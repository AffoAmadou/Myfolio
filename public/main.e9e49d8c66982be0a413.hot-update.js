/*! For license information please see main.e9e49d8c66982be0a413.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/Home/Media.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/ogl/src/core/Program.js"),h=s("./node_modules/ogl/src/core/Mesh.js"),l=s("./app/shaders/plane-fragment.glsl"),r=s("./app/shaders/plane-vertex.glsl"),o=s("./node_modules/gsap/index.js");class a{constructor({element:e,geometry:t,gl:s,index:i,scene:h,sizes:l}){this.element=e,this.geometry=t,this.gl=s,this.scene=h,this.index=i,this.sizes=l,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){const e=this.element.querySelector(".home__gallery__media__image");this.texture=window.TEXTURES[e.getAttribute("data-src")]}createProgram(){this.program=new i.Program(this.gl,{fragment:l.default,vertex:r.default,uniforms:{uAlpha:{value:0},tMap:{value:this.texture}}})}createMesh(){this.mesh=new h.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.scale.x=2}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){o.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){o.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.width=this.bounds.width/window.innerWidth,this.height=this.bounds.height/window.innerHeight,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.bounds&&(this.updateX(e),this.updateY())}}},"./app/components/Canvas/Home/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});var i=s("./node_modules/lodash/lodash.js"),h=s("./node_modules/ogl/src/core/Transform.js"),l=s("./node_modules/ogl/src/extras/Plane.js"),r=s("./app/components/Canvas/Home/Media.js"),o=s("./node_modules/prefix/index.js"),a=s.n(o),n=s("./node_modules/gsap/index.js");const c=class{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.scene=t,this.group=new h.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.galleryElementWrapper=document.querySelector(".home__gallery__wrapper"),this.mediasElements=document.querySelectorAll(".home__gallery__media"),this.projectsElementsActive="home__article--active",this.projectsElements=document.querySelectorAll(".home__article"),this.projectsTitle=document.querySelectorAll(".home__title__article"),this.projectsTitleActive="home__title__article--active",this.transformPrefix=a()("transform"),this.scroll={current:0,target:0,start:0,lerp:.1,last:0,velocity:1},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new l.Plane(this.gl)}createGallery(){this.medias=(0,i.map)(this.mediasElements,((e,t)=>new r.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.medias,(e=>e.show()))}hide(){(0,i.map)(this.medias,(e=>e.hide()))}onResize(e){this.sizes=e.sizes,this.bounds=this.galleryElementWrapper.getBoundingClientRect(),this.scroll.last=this.scroll.target=0,(0,i.map)(this.medias,(t=>t.onResize(e,this.scroll))),this.scroll.limit=this.bounds.width-this.medias[0].element.clientWidth}onTouchDown({x:e,y:t}){this.scroll.last=this.scroll.current}onTouchMove({x:e,y:t}){const s=e.start-e.end;this.scroll.target=this.scroll.last-s}onTouchUp({x:e,y:t}){}onWheel({pixelY:e}){this.scroll.target+=e}onChange(e){this.index=e,console.log(this.mediasElements.length),this.index===this.mediasElements.length&&(this.index=this.index-1);const t=parseInt(this.mediasElements[this.index].getAttribute("data-index"));(0,i.map)(this.projectsElements,((e,s)=>{s===t?e.classList.add(this.projectsElementsActive):e.classList.remove(this.projectsElementsActive)})),(0,i.map)(this.projectsTitle,((e,s)=>{console.log(s,t),s===t?e.classList.add(this.projectsTitleActive):e.classList.remove(this.projectsTitleActive)}))}update(){if(!this.bounds)return;this.scroll.target=n.default.utils.clamp(-this.scroll.limit,0,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),this.galleryElement.style[this.transformPrefix]=`translateX(${this.scroll.current}px)`,this.scroll.last<this.scroll.current?this.scroll.direction="right":this.scroll.last>this.scroll.current&&(this.scroll.direction="left"),this.scroll.last=this.scroll.current,(0,i.map)(this.medias,((e,t)=>{e.update(this.scroll.current)}));const e=Math.floor(Math.abs(this.scroll.current/this.scroll.limit)*this.medias.length);this.index!==e&&this.onChange(e)}destroy(){this.scene.removeChild(this.group)}}}},(function(e){e.h=()=>"3faf5b1ad33a3a604aa7"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,