/*! For license information please see main.6bc5ffc93241304004a1.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/components/Canvas/Project/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>a});var i=s("./node_modules/lodash/lodash.js"),o=s("./node_modules/ogl/src/core/Transform.js"),n=s("./node_modules/ogl/src/extras/Plane.js"),h=s("./app/components/Canvas/Project/Gallery.js");const a=class{constructor({gl:e,scene:t,sizes:s}){this.gl=e,this.sizes=s,this.group=new o.Transform,this.createGeometry(),this.createGalleries(),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new n.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".project__mobile"),this.galleries=(0,i.map)(this.galleriesElements,((e,t)=>new h.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){(0,i.map)(this.galleries,(e=>e.show()))}hide(){(0,i.map)(this.galleries,(e=>e.hide()))}onResize(e){(0,i.map)(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){(0,i.map)(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){(0,i.map)(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){(0,i.map)(this.galleries,(t=>t.onTouchUp(e)))}onWheel({pixelX:e,pixelY:t}){}update(e){(0,i.map)(this.galleries,(t=>t.update(e)))}destroy(){(0,i.map)(this.galleries,(e=>e.destroy()))}}},"./app/components/Canvas/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>c});s("./node_modules/lodash/lodash.js");var i=s("./node_modules/ogl/src/core/Renderer.js"),o=s("./node_modules/ogl/src/core/Camera.js"),n=s("./node_modules/ogl/src/core/Transform.js"),h=s("./app/components/Canvas/Home/index.js"),a=s("./app/components/Canvas/Project/index.js");class c{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.onChangeEnd(this.template)}createRenderer(){this.renderer=new i.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new o.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new n.Transform}createHome(){this.home=new h.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createProject(){this.project=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyProject(){this.project&&(this.project.destroy(),this.project=null)}onChangeStart(){this.home&&this.home.hide(),this.project&&this.project.hide()}onChangeEnd(e){"home"===e?this.createHome():this.destroyHome(),"project"===e?this.createProject():this.destroyProject()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,s=t*this.camera.aspect;this.sizes={height:t,width:s};const i={sizes:this.sizes};this.project&&this.project.onResize(i),this.home&&this.home.onResize(i)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.project&&this.project.onTouchDown(t),this.home&&this.home.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,s=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.project&&this.project.onTouchMove(i),this.home&&this.home.onTouchMove(i)}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,s=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=s;const i={x:this.x,y:this.y};this.project&&this.project.onTouchUp(i),this.home&&this.home.onTouchUp(i)}onWheel(e){this.home&&this.home.onWheel(e)}update(e){this.project&&this.project.update(e),this.home&&this.home.update(),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/index.js":(e,t,s)=>{s.r(t);var i=s("./app/pages/About/index.js"),o=s("./app/pages/Projects/index.js"),n=s("./node_modules/lodash/each.js"),h=s.n(n),a=s("./app/pages/Home/index.js"),c=s("./app/components/Preloader.js"),r=(s("./app/classes/Detection.js"),s("./node_modules/normalize-wheel/index.js")),d=s.n(r),l=s("./app/components/Canvas/index.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createPages(),this.createCanvas(),this.addEventListeners(),this.addLinkListeners(),this.update()}createPreloader(){this.preloader=new c.default,this.preloader.once("complete",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new l.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,home:new a.default,project:new o.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(this.template),await this.page.hide();const s=await window.fetch(e);if(200===s.status){const i=await s.text(),o=document.createElement("div");t&&window.history.pushState({},"",e),o.innerHTML=i;const n=o.querySelector(".content");this.template=n.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),window.requestAnimationFrame((e=>{this.page&&this.page.onResize&&this.page.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=d()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");h()(e,(e=>{e.onclick=t=>{const{href:s}=e;t.preventDefault(),this.onChange({url:s})}}))}}},"./styles/index.scss":(e,t,s)=>{s.r(t);var i=s("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)}},(function(e){e.h=()=>"2fd6354093e3ced545bc"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OEQsT0FBTzhELGlCQUFpQixTQUFVNUgsS0FBS21CLFNBQVN1RSxLQUFLMUYsTUFDeEQsQ0FFRHFGLG1CQUNJLE1BQU13QyxFQUFRbkgsU0FBU0MsaUJBQWlCLEtBRXhDbUgsSUFBS0QsR0FBT0UsSUFDUkEsRUFBS0MsUUFBVTVHLElBQ1gsTUFBTSxLQUFFNkcsR0FBU0YsRUFDakIzRyxFQUFNOEcsaUJBRU5sSSxLQUFLb0csU0FBUyxDQUFFQyxJQUFLNEIsR0FBckIsQ0FKSixHQVFQLDJDQ3pOQyxJQUFJRSxFQUFZLEVBQVEsMEVBQVIsQ0FBb0ZDLEVBQU9DLEdBQUksQ0FBQyxXQUFhLEdBQUcsUUFBUyxJQUN6SUQsRUFBT0UsSUFBSUMsUUFBUUosR0FDbkJDLEVBQU9FLElBQUlFLFlBQU9DLEVBQVdOLGtCQ05uQ08sRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0ZXIvLi9hcHAvY29tcG9uZW50cy9DYW52YXMvUHJvamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9zdGFydGVyLy4vYXBwL2NvbXBvbmVudHMvQ2FudmFzL2luZGV4LmpzIiwid2VicGFjazovL3N0YXJ0ZXIvLi9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RhcnRlci8uL3N0eWxlcy9pbmRleC5zY3NzP2YwZmYiLCJ3ZWJwYWNrOi8vc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwIH0gZnJvbSBcImxvZGFzaFwiXHJcbmltcG9ydCB7IFBsYW5lLCBUcmFuc2Zvcm0gfSBmcm9tIFwib2dsXCJcclxuaW1wb3J0IEdhbGxlcnkgZnJvbSBcIi4vR2FsbGVyeVwiXHJcblxyXG5pbXBvcnQgR1NBUCBmcm9tICdnc2FwJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG4gICAgY29uc3RydWN0b3IoeyBnbCwgc2NlbmUsIHNpemVzIH0pIHtcclxuICAgICAgICB0aGlzLmdsID0gZ2xcclxuICAgICAgICB0aGlzLnNpemVzID0gc2l6ZXNcclxuXHJcbiAgICAgICAgdGhpcy5ncm91cCA9IG5ldyBUcmFuc2Zvcm0oKVxyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUdlb21ldHJ5KClcclxuICAgICAgICB0aGlzLmNyZWF0ZUdhbGxlcmllcygpXHJcblxyXG4gICAgICAgIHRoaXMuZ3JvdXAuc2V0UGFyZW50KHNjZW5lKVxyXG5cclxuICAgICAgICB0aGlzLnNob3coKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUdlb21ldHJ5KCkge1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBuZXcgUGxhbmUodGhpcy5nbClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVHYWxsZXJpZXMoKSB7XHJcbiAgICAgICAgdGhpcy5nYWxsZXJpZXNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0X19tb2JpbGUnKVxyXG5cclxuICAgICAgICB0aGlzLmdhbGxlcmllcyA9IG1hcCh0aGlzLmdhbGxlcmllc0VsZW1lbnRzLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHYWxsZXJ5KHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeTogdGhpcy5nZW9tZXRyeSxcclxuICAgICAgICAgICAgICAgIGluZGV4LFxyXG4gICAgICAgICAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgICAgICAgICBzY2VuZTogdGhpcy5ncm91cCxcclxuICAgICAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIFxyXG4gICAgc2hvdygpe1xyXG4gICAgICAgIG1hcCh0aGlzLmdhbGxlcmllcywgZ2FsbGVyeSA9PiBnYWxsZXJ5LnNob3coKSlcclxuICAgIH1cclxuXHJcbiAgICBoaWRlKCl7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkuaGlkZSgpKVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50c1xyXG4gICAgICovXHJcbiAgICBvblJlc2l6ZShldmVudCkge1xyXG4gICAgICAgIG1hcCh0aGlzLmdhbGxlcmllcywgZ2FsbGVyeSA9PiBnYWxsZXJ5Lm9uUmVzaXplKGV2ZW50KSlcclxuICAgIH1cclxuXHJcbiAgICBvblRvdWNoRG93bihldmVudCkge1xyXG4gICAgICAgIG1hcCh0aGlzLmdhbGxlcmllcywgZ2FsbGVyeSA9PiBnYWxsZXJ5Lm9uVG91Y2hEb3duKGV2ZW50KSlcclxuICAgIH1cclxuICAgIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkub25Ub3VjaE1vdmUoZXZlbnQpKVxyXG4gICAgfVxyXG4gICAgb25Ub3VjaFVwKGV2ZW50KSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkub25Ub3VjaFVwKGV2ZW50KSlcclxuICAgIH1cclxuXHJcbiAgICBvbldoZWVsKHsgcGl4ZWxYLCBwaXhlbFkgfSkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVQREFURVxyXG4gICAgICovXHJcblxyXG4gICAgdXBkYXRlKHNjcm9sbCkge1xyXG4gICAgICAgIG1hcCh0aGlzLmdhbGxlcmllcywgZ2FsbGVyeSA9PiBnYWxsZXJ5LnVwZGF0ZShzY3JvbGwpKVxyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgbWFwKHRoaXMuZ2FsbGVyaWVzLCBnYWxsZXJ5ID0+IGdhbGxlcnkuZGVzdHJveSgpKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgdmFsdWVzIH0gZnJvbSAnbG9kYXNoJ1xyXG5pbXBvcnQgeyBDYW1lcmEsIFJlbmRlcmVyLCBUcmFuc2Zvcm0gfSBmcm9tICdvZ2wnXHJcbmltcG9ydCBIb21lIGZyb20gJy4vSG9tZSdcclxuaW1wb3J0IFByb2plY3QgZnJvbSAnLi9Qcm9qZWN0J1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbnZhcyB7XHJcbiAgICBjb25zdHJ1Y3Rvcih7IHRlbXBsYXRlIH0pIHtcclxuXHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlXHJcblxyXG4gICAgICAgIHRoaXMueCA9IHtcclxuICAgICAgICAgICAgc3RhcnQ6IDAsXHJcbiAgICAgICAgICAgIGRpc3RhbmNlOiAwLFxyXG4gICAgICAgICAgICBlbmQ6IDBcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy55ID0ge1xyXG4gICAgICAgICAgICBzdGFydDogMCxcclxuICAgICAgICAgICAgZGlzdGFuY2U6IDAsXHJcbiAgICAgICAgICAgIGVuZDogMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJlcigpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVDYW1lcmEoKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlU2NlbmUoKVxyXG5cclxuICAgICAgICB0aGlzLm9uUmVzaXplKClcclxuXHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUVuZCh0aGlzLnRlbXBsYXRlKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVJlbmRlcmVyKCkge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoe1xyXG4gICAgICAgICAgICBhbHBoYTogdHJ1ZSxcclxuICAgICAgICAgICAgYW50aWFsaWFzOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmdsID0gdGhpcy5yZW5kZXJlci5nbFxyXG5cclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZ2wuY2FudmFzKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNhbWVyYSgpIHtcclxuICAgICAgICB0aGlzLmNhbWVyYSA9IG5ldyBDYW1lcmEodGhpcy5nbClcclxuICAgICAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gNVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVNjZW5lKCkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUgPSBuZXcgVHJhbnNmb3JtKClcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVIb21lKCkge1xyXG4gICAgICAgIHRoaXMuaG9tZSA9IG5ldyBIb21lKHtcclxuICAgICAgICAgICAgZ2w6IHRoaXMuZ2wsXHJcbiAgICAgICAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxyXG4gICAgICAgICAgICBzaXplczogdGhpcy5zaXplc1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveUhvbWUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhvbWUpIHJldHVyblxyXG4gICAgICAgIHRoaXMuaG9tZS5kZXN0cm95KClcclxuICAgICAgICB0aGlzLmhvbWUgPSBudWxsXHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNyZWF0ZVByb2plY3QoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gbmV3IFByb2plY3Qoe1xyXG4gICAgICAgICAgICBnbDogdGhpcy5nbCxcclxuICAgICAgICAgICAgc2NlbmU6IHRoaXMuc2NlbmUsXHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95UHJvamVjdCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMucHJvamVjdCkgcmV0dXJuXHJcbiAgICAgICAgdGhpcy5wcm9qZWN0LmRlc3Ryb3koKVxyXG4gICAgICAgIHRoaXMucHJvamVjdCA9IG51bGxcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogLy8qRXZlbnRzXHJcbiAgICAgKi9cclxuXHJcbiAgICBvbkNoYW5nZVN0YXJ0KCl7XHJcbiAgICAgICAgaWYodGhpcy5ob21lKXtcclxuICAgICAgICAgICAgdGhpcy5ob21lLmhpZGUoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5wcm9qZWN0KXtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0LmhpZGUoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2hhbmdlRW5kKHRlbXBsYXRlKSB7XHJcblxyXG4gICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gJ2hvbWUnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlSG9tZSgpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kZXN0cm95SG9tZSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGVtcGxhdGUgPT09ICdwcm9qZWN0Jykge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByb2plY3QoKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzdHJveVByb2plY3QoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblJlc2l6ZSgpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcclxuXHJcbiAgICAgICAgdGhpcy5jYW1lcmEucGVyc3BlY3RpdmUoe1xyXG4gICAgICAgICAgICBhc3BlY3Q6IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGZvdiA9IHRoaXMuY2FtZXJhLmZvdiAqIChNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4oZm92IC8gMikgKiB0aGlzLmNhbWVyYS5wb3NpdGlvbi56O1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gaGVpZ2h0ICogdGhpcy5jYW1lcmEuYXNwZWN0O1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5zaXplcyA9IHtcclxuICAgICAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aFxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgICAgICAgIHNpemVzOiB0aGlzLnNpemVzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9qZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvamVjdC5vblJlc2l6ZSh2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZS5vblJlc2l6ZSh2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hEb3duKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pc0Rvd24gPSB0cnVlXHJcbiAgICAgICAgdGhpcy54LnN0YXJ0ID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LmNsaWVudFhcclxuICAgICAgICB0aGlzLnkuc3RhcnQgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WVxyXG5cclxuICAgICAgICBjb25zdCB2YWx1ZXMgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMueCxcclxuICAgICAgICAgICAgeTogdGhpcy55XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9qZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvamVjdC5vblRvdWNoRG93bih2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZS5vblRvdWNoRG93bih2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRG93bikgcmV0dXJuXHJcblxyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WFxyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WVxyXG5cclxuICAgICAgICB0aGlzLnguZW5kID0geFxyXG4gICAgICAgIHRoaXMueS5lbmQgPSB5XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLnlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0Lm9uVG91Y2hNb3ZlKHZhbHVlcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ob21lLm9uVG91Y2hNb3ZlKHZhbHVlcylcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hVcChldmVudCkge1xyXG4gICAgICAgIHRoaXMuaXNEb3duID0gZmFsc2VcclxuXHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzID8gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCA6IGV2ZW50LmNsaWVudFhcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WVxyXG5cclxuICAgICAgICB0aGlzLnguZW5kID0geFxyXG4gICAgICAgIHRoaXMueS5lbmQgPSB5XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHtcclxuICAgICAgICAgICAgeDogdGhpcy54LFxyXG4gICAgICAgICAgICB5OiB0aGlzLnlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb2plY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0Lm9uVG91Y2hVcCh2YWx1ZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5ob21lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9tZS5vblRvdWNoVXAodmFsdWVzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICBvbldoZWVsKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9tZSkge1xyXG4gICAgICAgICAgICB0aGlzLmhvbWUub25XaGVlbChldmVudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIC8vKiBMT09QXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZShzY3JvbGwpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb2plY3QudXBkYXRlKHNjcm9sbClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhvbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5ob21lLnVwZGF0ZSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbmRlcih7XHJcbiAgICAgICAgICAgIGNhbWVyYTogdGhpcy5jYW1lcmEsXHJcbiAgICAgICAgICAgIHNjZW5lOiB0aGlzLnNjZW5lLFxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iLCIvLyEgSW1wb3J0byBsZSBkaXZlcnNlIHBhZ2luZSBzYXBlbmRvIGNoZSBhbGwnaW50ZXJubyBjaSBzb25vIGRlZ2xpIGluZGV4IHF1aW5kaVxyXG4vLyEgTmVzc3VuIGJpc29nbm8gZGkgY2hpYW1hcmUgaWwgZmlsZSBpbnRlcm9cclxuXHJcbmltcG9ydCBBYm91dCBmcm9tICdwYWdlcy9BYm91dCdcclxuaW1wb3J0IFByb2plY3QgZnJvbSAncGFnZXMvUHJvamVjdHMnXHJcbmltcG9ydCBlYWNoIGZyb20gJ2xvZGFzaC9lYWNoJ1xyXG5pbXBvcnQgSG9tZSBmcm9tICdwYWdlcy9Ib21lJ1xyXG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gJ2NvbXBvbmVudHMvUHJlbG9hZGVyJ1xyXG5pbXBvcnQgRGV0ZWN0aW9uIGZyb20gJ2NsYXNzZXMvRGV0ZWN0aW9uJ1xyXG5cclxuaW1wb3J0IE5vcm1hbGl6ZVdoZWVsIGZyb20gJ25vcm1hbGl6ZS13aGVlbCdcclxuXHJcblxyXG5pbXBvcnQgQ2FudmFzIGZyb20gJ2NvbXBvbmVudHMvQ2FudmFzJ1xyXG4vLyogSU1QT1JUTyBHTEkgSU5ERVggUFJFU0VOVEkgTkVMTEUgQ0FSVEVMTEVcclxuXHJcbmNsYXNzIEFwcCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKSAvLyEgUXVlc3RvIG1ldG9kbyBtaSBwZXJtZXR0ZSBkaSBjcmVhcmUgaWwgY29udGVudCBlIGNvc2kgZGEgcmVjdXBlcmFyZSBpbCBkYXRhLXRlbXBsYXRlIFxyXG4gICAgICAgIC8vISBFIHBlcmNpbyBzYXBlcmUgaW4gY2hlIHBhZ2luYSBtaSB0cm92b1xyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXHJcbiAgICAgICAgLy8gdGhpcy5jcmVhdGVOYXZpZ2F0aW9uKClcclxuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2VzKClcclxuICAgICAgICB0aGlzLmNyZWF0ZUNhbnZhcygpXHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXHJcbiAgICAgICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKClcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLy8qRXZlbnRzXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVByZWxvYWRlcigpIHtcclxuICAgICAgICB0aGlzLnByZWxvYWRlciA9IG5ldyBQcmVsb2FkZXIoKVxyXG5cclxuICAgICAgICAvLypFdmVudCBFbWl0dGVyIHF1YW5kbyBpbCBwcmVsb2FkZXIgaGEgY2FyaWNhdG8gbGUgaW1tYWdpbmkgY2hpYW1vIGlsIG1ldG9kbyBjaGUgc3RhIHF1aSBzb3R0b1xyXG4gICAgICAgIHRoaXMucHJlbG9hZGVyLm9uY2UoJ2NvbXBsZXRlJywgdGhpcy5vblByZWxvYWRlZC5iaW5kKHRoaXMpKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNhbnZhcygpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IG5ldyBDYW52YXMoe1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy50ZW1wbGF0ZVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ29udGVudCgpIHtcclxuICAgICAgICAvLz9RdWkgZXNlZ3VvIGlsIGNyZWF0ZSBjb250ZW50IHBlciBzYXBlcmUgaW4gcXVhbGUgcGFnaW5hIG1pIHRyb3ZvIGF0dHVhbG1lbnRlXHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0aGlzLmNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnRlbXBsYXRlKVxyXG4gICAgfVxyXG5cclxuICAgIC8vPyBJIHF1ZXN0byBtb2RvIGNyZW8gbCdvZ2dldHRvIFBBR0lOQVxyXG4gICAgY3JlYXRlUGFnZXMoKSB7XHJcbiAgICAgICAgdGhpcy5wYWdlcyA9IHtcclxuICAgICAgICAgICAgYWJvdXQ6IG5ldyBBYm91dCgpLFxyXG4gICAgICAgICAgICBob21lOiBuZXcgSG9tZSgpLFxyXG4gICAgICAgICAgICBwcm9qZWN0OiBuZXcgUHJvamVjdCgpLCAvLyFJbCBub21lIGNvbG9yYXRvIGRldmUgZXNzZXJlIHVndWFsZSBhIG5vbWUgZGF0byBuZWwgdGVtcGxhdGUgXHJcbiAgICAgICAgICAgIC8vIGRldGFpbDogbmV3IERldGFpbCgpLFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wYWdlID0gdGhpcy5wYWdlc1t0aGlzLnRlbXBsYXRlXSAvLz9JTlNFUklTQ08gTEEgUEFHSU5BIElOIENVSSBTT05PIEFUVFVBTE1FTlRFXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5wYWdlKVxyXG4gICAgICAgIHRoaXMucGFnZS5jcmVhdGUoKSAvLz8gQ2hpYW1vIGlsIGNyZWF0ZSBuZWxsYSBjbGFzc2UgcGFnZSBjaGUgw6kgbGVnYXRhIGFkIG9nbnVuYSBkZWxsZSBwYWdpbmVcclxuXHJcbiAgICAgICAgLy8gdGhpcy5wYWdlLmhpZGUoKVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblByZWxvYWRlZCgpIHtcclxuICAgICAgICB0aGlzLnByZWxvYWRlci5kZXN0cm95KClcclxuICAgICAgICB0aGlzLm9uUmVzaXplKClcclxuICAgICAgICB0aGlzLnBhZ2Uuc2hvdygpXHJcbiAgICB9XHJcblxyXG4gICAgb25Qb3BTdGF0ZSgpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHtcclxuICAgICAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXHJcbiAgICAgICAgICAgIHB1c2g6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvbkNoYW5nZSh7IHVybCwgcHVzaCA9IHRydWUgfSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHVybClcclxuICAgICAgICB0aGlzLmNhbnZhcy5vbkNoYW5nZVN0YXJ0KHRoaXMudGVtcGxhdGUpXHJcbiAgICAgICAgYXdhaXQgdGhpcy5wYWdlLmhpZGUoKVxyXG5cclxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgd2luZG93LmZldGNoKHVybClcclxuXHJcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHsgLy8hMjAwID0gcGFnaW5hIGJlbiBjYXJpY2F0YVxyXG4gICAgICAgICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVxdWVzdC50ZXh0KCkgLy8hcmVjdXBlcm8gaWwgY29udGVudXRvIGRlbGxhIHBhZ2luYVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgLy8hQ3JlbyB1bmEgZGl2IHBlciBtZXR0ZXJjaSBsYSBwYXJ0ZSBkZWwgXCJodG1sXCIgY2hlIHZvZ2xpb1xyXG4gICAgICAgICAgICAvLyFjb3NpIGRhIG5vbiBtZXR0ZXJlIGFuY2hlIGkgZG9jdHlwZSBldGMgXHJcblxyXG4gICAgICAgICAgICBpZiAocHVzaCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgdXJsKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gaHRtbFxyXG5cclxuICAgICAgICAgICAgY29uc3QgZGl2Q29udGVudCA9IGRpdi5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpLy8hIFJlY3VwZXJvIHNvbG8gaWwgLmNvbnRlbnQgY2hlIGNvbnRpZW5lIGxhIHBhcnRlIGRpIGRpdnMgY2hlIGNhbWJpYSBpbiBvZ25pIHBhZ2luYVxyXG5cclxuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IGRpdkNvbnRlbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJylcclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuc2V0QXR0cmlidXRlKCdkYXRhLXRlbXBsYXRlJywgdGhpcy50ZW1wbGF0ZSk7Ly8qQ2FtYmlvIGlsIGRhdGEtdGVtcGxhdGUgcGVyIGZhciBzYXBlcmUgY2hlIHNvbm8gaW4gcXVlc3RhIHBhZ2luYSBhdHR1YWxtZW50ZVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnQuaW5uZXJIVE1MID0gZGl2Q29udGVudC5pbm5lckhUTUwgLy8hIEUgbG8gaW5zZXJpc2NvIG5lbCBjb250ZW50IGRlbGxhIHBhZ2luYSBpbiBjdWkgc29ubyBvcmFcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLm9uQ2hhbmdlRW5kKHRoaXMudGVtcGxhdGUpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMudGVtcGxhdGVdIC8vIVJpYXNzZWdubyBsYSBwYWdpbmFcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFnZS5jcmVhdGUoKSAvLz8gQ2hpYW1vIGlsIGNyZWF0ZSBuZWxsYSBjbGFzc2UgcGFnZSBjaGUgw6kgbGVnYXRhIGFkIG9nbnVuYSBkZWxsZSBwYWdpbmVcclxuXHJcbiAgICAgICAgICAgIHRoaXMub25SZXNpemUoKVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wYWdlLnNob3coKVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3JcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uUmVzaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblJlc2l6ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5vblJlc2l6ZSgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXyA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uUmVzaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2Uub25SZXNpemUoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBvblRvdWNoRG93bihldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblRvdWNoRG93bikge1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5vblRvdWNoRG93bihldmVudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvblRvdWNoTW92ZShldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblRvdWNoTW92ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5vblRvdWNoTW92ZShldmVudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvblRvdWNoVXAoZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25Ub3VjaFVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLm9uVG91Y2hVcChldmVudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25XaGVlbChldmVudCkge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRXaGVlbCA9IE5vcm1hbGl6ZVdoZWVsKGV2ZW50KSAvLyogUGVyIG5vcm1hbGl6emFyZSBsYSB2ZWxvY2l0YSBpbiBvZ25pIGJyb3dzZXJcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uV2hlZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMub25XaGVlbChub3JtYWxpemVkV2hlZWwpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5wYWdlICYmIHRoaXMucGFnZS5vbldoZWVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZS5vbldoZWVsKG5vcm1hbGl6ZWRXaGVlbClcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLy8qTE9PUFxyXG4gICAgICovXHJcblxyXG4gICAgdXBkYXRlKCkge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wYWdlICYmIHRoaXMucGFnZS51cGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlLnVwZGF0ZSgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMudXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnVwZGF0ZSh0aGlzLnBhZ2Uuc2Nyb2xsKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5mcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIC8vKkxJU1RFTkVSU1xyXG4gICAgICovXHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzLm9uV2hlZWwuYmluZCh0aGlzKSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdGhpcy5vblBvcFN0YXRlLmJpbmQodGhpcykpXHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uVG91Y2hEb3duLmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKSlcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Ub3VjaFVwLmJpbmQodGhpcykpXHJcblxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoRG93bi5iaW5kKHRoaXMpKVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlLmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vblRvdWNoVXAuYmluZCh0aGlzKSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMub25SZXNpemUuYmluZCh0aGlzKSlcclxuICAgIH1cclxuXHJcbiAgICBhZGRMaW5rTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIGNvbnN0IGxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpIC8vISBSZWN1cGVybyB0dXR0aSBpIGxpbmsgZGVsbGEgcGFnaW5hIFxyXG5cclxuICAgICAgICBlYWNoKGxpbmtzLCBsaW5rID0+IHtcclxuICAgICAgICAgICAgbGluay5vbmNsaWNrID0gZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBocmVmIH0gPSBsaW5rXHJcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpIC8vIWFsbCBjbGljayBub24gZXNlZ3VvIGlsIGNhbWJpbyBkaSBwYWdpbmEgY29tZSBkb3ZyZWJiZSBlc3NlcmVyXHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh7IHVybDogaHJlZiB9KS8vKkZ1bnppb25lIGNoZSBzaSB0cm92YSBzb3ByYSBQZXIgZ2VzdGlyZSBpbCBjYW1iaW8gZGkgcGFnaW5hXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhldmVudCwgaHJlZilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbm5ldyBBcHAoKSIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE2NjczMzYwODIyNzFcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiXCIsXCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIyZmQ2MzU0MDkzZTNjZWQ1NDViY1wiKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsImdsIiwic2NlbmUiLCJzaXplcyIsInRoaXMiLCJncm91cCIsIlRyYW5zZm9ybSIsImNyZWF0ZUdlb21ldHJ5IiwiY3JlYXRlR2FsbGVyaWVzIiwic2V0UGFyZW50Iiwic2hvdyIsImdlb21ldHJ5IiwiUGxhbmUiLCJnYWxsZXJpZXNFbGVtZW50cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImdhbGxlcmllcyIsIm1hcCIsImVsZW1lbnQiLCJpbmRleCIsIkdhbGxlcnkiLCJnYWxsZXJ5IiwiaGlkZSIsIm9uUmVzaXplIiwiZXZlbnQiLCJvblRvdWNoRG93biIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFVwIiwib25XaGVlbCIsInBpeGVsWCIsInBpeGVsWSIsInVwZGF0ZSIsInNjcm9sbCIsImRlc3Ryb3kiLCJDYW52YXMiLCJ0ZW1wbGF0ZSIsIngiLCJzdGFydCIsImRpc3RhbmNlIiwiZW5kIiwieSIsImNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlU2NlbmUiLCJvbkNoYW5nZUVuZCIsInJlbmRlcmVyIiwiUmVuZGVyZXIiLCJhbHBoYSIsImFudGlhbGlhcyIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNhbnZhcyIsImNhbWVyYSIsIkNhbWVyYSIsInBvc2l0aW9uIiwieiIsImNyZWF0ZUhvbWUiLCJob21lIiwiSG9tZSIsImRlc3Ryb3lIb21lIiwiY3JlYXRlUHJvamVjdCIsInByb2plY3QiLCJQcm9qZWN0IiwiZGVzdHJveVByb2plY3QiLCJvbkNoYW5nZVN0YXJ0Iiwic2V0U2l6ZSIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInBlcnNwZWN0aXZlIiwiYXNwZWN0IiwiZm92IiwiTWF0aCIsIlBJIiwiaGVpZ2h0IiwidGFuIiwid2lkdGgiLCJ2YWx1ZXMiLCJpc0Rvd24iLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJjaGFuZ2VkVG91Y2hlcyIsInJlbmRlciIsImNyZWF0ZUNvbnRlbnQiLCJjcmVhdGVQcmVsb2FkZXIiLCJjcmVhdGVQYWdlcyIsImNyZWF0ZUNhbnZhcyIsImFkZEV2ZW50TGlzdGVuZXJzIiwiYWRkTGlua0xpc3RlbmVycyIsInByZWxvYWRlciIsIlByZWxvYWRlciIsIm9uY2UiLCJvblByZWxvYWRlZCIsImJpbmQiLCJjb250ZW50IiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInBhZ2VzIiwiYWJvdXQiLCJBYm91dCIsInBhZ2UiLCJjcmVhdGUiLCJvblBvcFN0YXRlIiwib25DaGFuZ2UiLCJ1cmwiLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwicHVzaCIsInJlcXVlc3QiLCJmZXRjaCIsInN0YXR1cyIsImh0bWwiLCJ0ZXh0IiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJpbm5lckhUTUwiLCJkaXZDb250ZW50Iiwic2V0QXR0cmlidXRlIiwiY29uc29sZSIsImxvZyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl8iLCJub3JtYWxpemVkV2hlZWwiLCJOb3JtYWxpemVXaGVlbCIsImZyYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpbmtzIiwiZWFjaCIsImxpbmsiLCJvbmNsaWNrIiwiaHJlZiIsInByZXZlbnREZWZhdWx0IiwiY3NzUmVsb2FkIiwibW9kdWxlIiwiaWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9