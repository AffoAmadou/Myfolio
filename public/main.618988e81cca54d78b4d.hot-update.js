/*! For license information please see main.618988e81cca54d78b4d.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/index.js":(e,t,n)=>{n.r(t);var i=n("./app/pages/About/index.js"),s=n("./app/pages/Projects/index.js"),o=n("./node_modules/lodash/each.js"),a=n.n(o),h=n("./app/pages/Home/index.js"),d=n("./app/components/Preloader.js"),r=(n("./app/classes/Detection.js"),n("./node_modules/normalize-wheel/index.js")),c=n.n(r),p=n("./app/components/Canvas/index.js");new class{constructor(){this.createContent(),this.createCanvas(),this.createPreloader(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.update()}createPreloader(){this.preloader=new d.default({canvas:this.canvas}),this.preloader.once("complete",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new p.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new i.default,home:new h.default,project:new s.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.canvas.onPreloaded(),this.onResize(),this.page.show()}onPopState(){this.onChange({url:window.location.pathname,push:!1})}async onChange({url:e,push:t=!0}){this.canvas.onChangeStart(this.template,e),await this.page.hide();const n=await window.fetch(e);if(200===n.status){const i=await n.text(),s=document.createElement("div");t&&window.history.pushState({},"",e),s.innerHTML=i;const o=s.querySelector(".content");this.template=o.getAttribute("data-template"),this.content.setAttribute("data-template",this.template),this.content.innerHTML=o.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("error")}onResize(){this.canvas&&this.canvas.onResize&&this.canvas.onResize(),window.requestAnimationFrame((e=>{this.page&&this.page.onResize&&this.page.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const t=c()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(t),this.page&&this.page.onWheel&&this.page.onWheel(t)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("popstate",this.onPopState.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchstart",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");a()(e,(e=>{e.onclick=t=>{const{href:n}=e;t.preventDefault(),this.onChange({url:n})}}))}}},"./styles/index.scss":(e,t,n)=>{n.r(t);var i=n("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)},"./app/shaders/home-fragment.glsl":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});const i="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec4 vPosition;\n\nvarying vec2 vUv;\nvoid main() {\n    vec4 texture = texture2D(tMap, vUv);\n    gl_FragColor = texture;\n    gl_FragColor.a = (1.0 - abs(vPosition.x * 0.5)) * uAlpha;\n}"},"./app/shaders/home-vertex.glsl":(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});const i="#define GLSLIFY 1\n#define PI 3.1415926535897932384626433832795\n\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform float uSpeed;\nuniform vec2 uViewportSizes;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvarying vec4 vPosition;\n\nvoid main() {\n    vUv = uv;\n\n    vec4 newPosition = modelViewMatrix * vec4(position, 1.0);\n\n    vPosition = newPosition;\n    // newPosition.z += cos(position.x * PI);\n\n    // newPosition.z += sin(newPosition.y / uViewportSizes.y * PI + PI / 2.0) * abs(uSpeed);\n    // newPosition.z += sin(newPosition.x / uViewportSizes.y * PI + PI / 4.0);\n    // newPosition.z -= sin((newPosition.x / uViewportSizes.y) + (newPosition.y / uViewportSizes.x) * PI + PI / 2.0);\n    newPosition.z -= sin((newPosition.x / uViewportSizes.y) * PI + PI / 2.0) * abs(1.0 + uSpeed);\n\n    gl_Position = projectionMatrix * newPosition;\n}"}},(function(e){e.h=()=>"6ca8f7113bda39e7a1b5"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UixDQUFvRkMsRUFBT0MsR0FBSSxDQUFDLFdBQWEsR0FBRyxRQUFTLElBQ3pJRCxFQUFPRSxJQUFJQyxRQUFRSixHQUNuQkMsRUFBT0UsSUFBSUUsWUFBT0MsRUFBV04sK0VDTm5DLHdYQ0FBLG02QkNBQU8sRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0ZXIvLi9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RhcnRlci8uL3N0eWxlcy9pbmRleC5zY3NzP2YwZmYiLCJ3ZWJwYWNrOi8vc3RhcnRlci8uL2FwcC9zaGFkZXJzL2hvbWUtZnJhZ21lbnQuZ2xzbCIsIndlYnBhY2s6Ly9zdGFydGVyLy4vYXBwL3NoYWRlcnMvaG9tZS12ZXJ0ZXguZ2xzbCIsIndlYnBhY2s6Ly9zdGFydGVyL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyEgSW1wb3J0byBsZSBkaXZlcnNlIHBhZ2luZSBzYXBlbmRvIGNoZSBhbGwnaW50ZXJubyBjaSBzb25vIGRlZ2xpIGluZGV4IHF1aW5kaVxyXG4vLyEgTmVzc3VuIGJpc29nbm8gZGkgY2hpYW1hcmUgaWwgZmlsZSBpbnRlcm9cclxuXHJcbmltcG9ydCBBYm91dCBmcm9tICdwYWdlcy9BYm91dCdcclxuaW1wb3J0IFByb2plY3QgZnJvbSAncGFnZXMvUHJvamVjdHMnXHJcbmltcG9ydCBlYWNoIGZyb20gJ2xvZGFzaC9lYWNoJ1xyXG5pbXBvcnQgSG9tZSBmcm9tICdwYWdlcy9Ib21lJ1xyXG5pbXBvcnQgUHJlbG9hZGVyIGZyb20gJ2NvbXBvbmVudHMvUHJlbG9hZGVyJ1xyXG5pbXBvcnQgRGV0ZWN0aW9uIGZyb20gJ2NsYXNzZXMvRGV0ZWN0aW9uJ1xyXG5cclxuaW1wb3J0IE5vcm1hbGl6ZVdoZWVsIGZyb20gJ25vcm1hbGl6ZS13aGVlbCdcclxuXHJcblxyXG5pbXBvcnQgQ2FudmFzIGZyb20gJ2NvbXBvbmVudHMvQ2FudmFzJ1xyXG4vLyogSU1QT1JUTyBHTEkgSU5ERVggUFJFU0VOVEkgTkVMTEUgQ0FSVEVMTEVcclxuXHJcbmNsYXNzIEFwcCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKSAvLyEgUXVlc3RvIG1ldG9kbyBtaSBwZXJtZXR0ZSBkaSBjcmVhcmUgaWwgY29udGVudCBlIGNvc2kgZGEgcmVjdXBlcmFyZSBpbCBkYXRhLXRlbXBsYXRlIFxyXG4gICAgICAgIC8vISBFIHBlcmNpbyBzYXBlcmUgaW4gY2hlIHBhZ2luYSBtaSB0cm92b1xyXG5cclxuICAgICAgICB0aGlzLmNyZWF0ZUNhbnZhcygpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVQcmVsb2FkZXIoKVxyXG4gICAgICAgIC8vIHRoaXMuY3JlYXRlTmF2aWdhdGlvbigpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVQYWdlcygpXHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpXHJcbiAgICAgICAgdGhpcy5hZGRMaW5rTGlzdGVuZXJzKClcclxuXHJcbiAgICAgICAgLy8gIHRoaXMub25SZXNpemUoKVxyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZSgpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAvLypFdmVudHNcclxuICAgICAqL1xyXG4gICAgY3JlYXRlUHJlbG9hZGVyKCkge1xyXG4gICAgICAgIHRoaXMucHJlbG9hZGVyID0gbmV3IFByZWxvYWRlcih7XHJcbiAgICAgICAgICAgIGNhbnZhczp0aGlzLmNhbnZhc1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vKkV2ZW50IEVtaXR0ZXIgcXVhbmRvIGlsIHByZWxvYWRlciBoYSBjYXJpY2F0byBsZSBpbW1hZ2luaSBjaGlhbW8gaWwgbWV0b2RvIGNoZSBzdGEgcXVpIHNvdHRvXHJcbiAgICAgICAgdGhpcy5wcmVsb2FkZXIub25jZSgnY29tcGxldGUnLCB0aGlzLm9uUHJlbG9hZGVkLmJpbmQodGhpcykpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ2FudmFzKCkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gbmV3IENhbnZhcyh7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0aGlzLnRlbXBsYXRlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVDb250ZW50KCkge1xyXG4gICAgICAgIC8vP1F1aSBlc2VndW8gaWwgY3JlYXRlIGNvbnRlbnQgcGVyIHNhcGVyZSBpbiBxdWFsZSBwYWdpbmEgbWkgdHJvdm8gYXR0dWFsbWVudGVcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpXHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMuY29udGVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudGVtcGxhdGUpXHJcbiAgICB9XHJcblxyXG4gICAgLy8/IEkgcXVlc3RvIG1vZG8gY3JlbyBsJ29nZ2V0dG8gUEFHSU5BXHJcbiAgICBjcmVhdGVQYWdlcygpIHtcclxuICAgICAgICB0aGlzLnBhZ2VzID0ge1xyXG4gICAgICAgICAgICBhYm91dDogbmV3IEFib3V0KCksXHJcbiAgICAgICAgICAgIGhvbWU6IG5ldyBIb21lKCksXHJcbiAgICAgICAgICAgIHByb2plY3Q6IG5ldyBQcm9qZWN0KCksIC8vIUlsIG5vbWUgY29sb3JhdG8gZGV2ZSBlc3NlcmUgdWd1YWxlIGEgbm9tZSBkYXRvIG5lbCB0ZW1wbGF0ZSBcclxuICAgICAgICAgICAgLy8gZGV0YWlsOiBuZXcgRGV0YWlsKCksXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhZ2UgPSB0aGlzLnBhZ2VzW3RoaXMudGVtcGxhdGVdIC8vP0lOU0VSSVNDTyBMQSBQQUdJTkEgSU4gQ1VJIFNPTk8gQVRUVUFMTUVOVEVcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLnBhZ2UpXHJcbiAgICAgICAgdGhpcy5wYWdlLmNyZWF0ZSgpIC8vPyBDaGlhbW8gaWwgY3JlYXRlIG5lbGxhIGNsYXNzZSBwYWdlIGNoZSDDqSBsZWdhdGEgYWQgb2dudW5hIGRlbGxlIHBhZ2luZVxyXG5cclxuICAgICAgICAvLyB0aGlzLnBhZ2UuaGlkZSgpXHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uUHJlbG9hZGVkKCkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzLm9uUHJlbG9hZGVkKClcclxuICAgICAgICB0aGlzLm9uUmVzaXplKClcclxuICAgICAgICB0aGlzLnBhZ2Uuc2hvdygpXHJcbiAgICB9XHJcblxyXG4gICAgb25Qb3BTdGF0ZSgpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHtcclxuICAgICAgICAgICAgdXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXHJcbiAgICAgICAgICAgIHB1c2g6IGZhbHNlXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBvbkNoYW5nZSh7IHVybCwgcHVzaCA9IHRydWUgfSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHVybClcclxuICAgICAgICB0aGlzLmNhbnZhcy5vbkNoYW5nZVN0YXJ0KHRoaXMudGVtcGxhdGUsIHVybClcclxuICAgICAgICBhd2FpdCB0aGlzLnBhZ2UuaGlkZSgpXHJcblxyXG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBhd2FpdCB3aW5kb3cuZmV0Y2godXJsKVxyXG5cclxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCkgeyAvLyEyMDAgPSBwYWdpbmEgYmVuIGNhcmljYXRhXHJcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZXF1ZXN0LnRleHQoKSAvLyFyZWN1cGVybyBpbCBjb250ZW51dG8gZGVsbGEgcGFnaW5hXHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSAvLyFDcmVvIHVuYSBkaXYgcGVyIG1ldHRlcmNpIGxhIHBhcnRlIGRlbCBcImh0bWxcIiBjaGUgdm9nbGlvXHJcbiAgICAgICAgICAgIC8vIWNvc2kgZGEgbm9uIG1ldHRlcmUgYW5jaGUgaSBkb2N0eXBlIGV0YyBcclxuXHJcbiAgICAgICAgICAgIGlmIChwdXNoKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCB1cmwpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sXHJcblxyXG4gICAgICAgICAgICBjb25zdCBkaXZDb250ZW50ID0gZGl2LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JykvLyEgUmVjdXBlcm8gc29sbyBpbCAuY29udGVudCBjaGUgY29udGllbmUgbGEgcGFydGUgZGkgZGl2cyBjaGUgY2FtYmlhIGluIG9nbmkgcGFnaW5hXHJcblxyXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlID0gZGl2Q29udGVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnKVxyXG5cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGVtcGxhdGUnLCB0aGlzLnRlbXBsYXRlKTsvLypDYW1iaW8gaWwgZGF0YS10ZW1wbGF0ZSBwZXIgZmFyIHNhcGVyZSBjaGUgc29ubyBpbiBxdWVzdGEgcGFnaW5hIGF0dHVhbG1lbnRlXHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudC5pbm5lckhUTUwgPSBkaXZDb250ZW50LmlubmVySFRNTCAvLyEgRSBsbyBpbnNlcmlzY28gbmVsIGNvbnRlbnQgZGVsbGEgcGFnaW5hIGluIGN1aSBzb25vIG9yYVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jYW52YXMub25DaGFuZ2VFbmQodGhpcy50ZW1wbGF0ZSlcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV0gLy8hUmlhc3NlZ25vIGxhIHBhZ2luYVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wYWdlLmNyZWF0ZSgpIC8vPyBDaGlhbW8gaWwgY3JlYXRlIG5lbGxhIGNsYXNzZSBwYWdlIGNoZSDDqSBsZWdhdGEgYWQgb2dudW5hIGRlbGxlIHBhZ2luZVxyXG5cclxuICAgICAgICAgICAgdGhpcy5vblJlc2l6ZSgpXHJcblxyXG4gICAgICAgICAgICB0aGlzLnBhZ2Uuc2hvdygpXHJcblxyXG4gICAgICAgICAgICB0aGlzLmFkZExpbmtMaXN0ZW5lcnMoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJlcnJvclwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgb25SZXNpemUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uUmVzaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLm9uUmVzaXplKClcclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShfID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2Uub25SZXNpemUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZS5vblJlc2l6ZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hEb3duKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hEb3duKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLm9uVG91Y2hEb3duKGV2ZW50KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLm9uVG91Y2hNb3ZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLm9uVG91Y2hNb3ZlKGV2ZW50KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uVG91Y2hVcChldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5vblRvdWNoVXApIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMub25Ub3VjaFVwKGV2ZW50KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbldoZWVsKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFdoZWVsID0gTm9ybWFsaXplV2hlZWwoZXZlbnQpIC8vKiBQZXIgbm9ybWFsaXp6YXJlIGxhIHZlbG9jaXRhIGluIG9nbmkgYnJvd3NlclxyXG5cclxuICAgICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMub25XaGVlbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5vbldoZWVsKG5vcm1hbGl6ZWRXaGVlbClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLm9uV2hlZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlLm9uV2hlZWwobm9ybWFsaXplZFdoZWVsKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAvLypMT09QXHJcbiAgICAgKi9cclxuXHJcbiAgICB1cGRhdGUoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2UgJiYgdGhpcy5wYWdlLnVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2UudXBkYXRlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy51cGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMudXBkYXRlKHRoaXMucGFnZS5zY3JvbGwpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogLy8qTElTVEVORVJTXHJcbiAgICAgKi9cclxuICAgIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIHRoaXMub25XaGVlbC5iaW5kKHRoaXMpKVxyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB0aGlzLm9uUG9wU3RhdGUuYmluZCh0aGlzKSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Ub3VjaERvd24uYmluZCh0aGlzKSlcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vblRvdWNoTW92ZS5iaW5kKHRoaXMpKVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vblRvdWNoVXAuYmluZCh0aGlzKSlcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hEb3duLmJpbmQodGhpcykpXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKSlcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hVcC5iaW5kKHRoaXMpKVxyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5vblJlc2l6ZS5iaW5kKHRoaXMpKVxyXG4gICAgfVxyXG5cclxuICAgIGFkZExpbmtMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgY29uc3QgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhJykgLy8hIFJlY3VwZXJvIHR1dHRpIGkgbGluayBkZWxsYSBwYWdpbmEgXHJcblxyXG4gICAgICAgIGVhY2gobGlua3MsIGxpbmsgPT4ge1xyXG4gICAgICAgICAgICBsaW5rLm9uY2xpY2sgPSBldmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGhyZWYgfSA9IGxpbmtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgLy8hYWxsIGNsaWNrIG5vbiBlc2VndW8gaWwgY2FtYmlvIGRpIHBhZ2luYSBjb21lIGRvdnJlYmJlIGVzc2VyZXJcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHsgdXJsOiBocmVmIH0pLy8qRnVuemlvbmUgY2hlIHNpIHRyb3ZhIHNvcHJhIFBlciBnZXN0aXJlIGlsIGNhbWJpbyBkaSBwYWdpbmFcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LCBocmVmKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxubmV3IEFwcCgpIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTY2ODE4ODIwMjI4OFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCJcIixcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsImV4cG9ydCBkZWZhdWx0IFwicHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiNkZWZpbmUgR0xTTElGWSAxXFxuXFxudW5pZm9ybSBmbG9hdCB1QWxwaGE7XFxudW5pZm9ybSBzYW1wbGVyMkQgdE1hcDtcXG5cXG52YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxudm9pZCBtYWluKCkge1xcbiAgICB2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQodE1hcCwgdlV2KTtcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG4gICAgZ2xfRnJhZ0NvbG9yLmEgPSAoMS4wIC0gYWJzKHZQb3NpdGlvbi54ICogMC41KSkgKiB1QWxwaGE7XFxufVwiOyIsImV4cG9ydCBkZWZhdWx0IFwiI2RlZmluZSBHTFNMSUZZIDFcXG4jZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTg5NzkzMjM4NDYyNjQzMzgzMjc5NVxcblxcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xcblxcbnVuaWZvcm0gZmxvYXQgdVNwZWVkO1xcbnVuaWZvcm0gdmVjMiB1Vmlld3BvcnRTaXplcztcXG5cXG51bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xcblxcbnZhcnlpbmcgdmVjMiB2VXY7XFxuXFxudmFyeWluZyB2ZWM0IHZQb3NpdGlvbjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZVdiA9IHV2O1xcblxcbiAgICB2ZWM0IG5ld1Bvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgdlBvc2l0aW9uID0gbmV3UG9zaXRpb247XFxuICAgIC8vIG5ld1Bvc2l0aW9uLnogKz0gY29zKHBvc2l0aW9uLnggKiBQSSk7XFxuXFxuICAgIC8vIG5ld1Bvc2l0aW9uLnogKz0gc2luKG5ld1Bvc2l0aW9uLnkgLyB1Vmlld3BvcnRTaXplcy55ICogUEkgKyBQSSAvIDIuMCkgKiBhYnModVNwZWVkKTtcXG4gICAgLy8gbmV3UG9zaXRpb24ueiArPSBzaW4obmV3UG9zaXRpb24ueCAvIHVWaWV3cG9ydFNpemVzLnkgKiBQSSArIFBJIC8gNC4wKTtcXG4gICAgLy8gbmV3UG9zaXRpb24ueiAtPSBzaW4oKG5ld1Bvc2l0aW9uLnggLyB1Vmlld3BvcnRTaXplcy55KSArIChuZXdQb3NpdGlvbi55IC8gdVZpZXdwb3J0U2l6ZXMueCkgKiBQSSArIFBJIC8gMi4wKTtcXG4gICAgbmV3UG9zaXRpb24ueiAtPSBzaW4oKG5ld1Bvc2l0aW9uLnggLyB1Vmlld3BvcnRTaXplcy55KSAqIFBJICsgUEkgLyAyLjApICogYWJzKDEuMCArIHVTcGVlZCk7XFxuXFxuICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG5ld1Bvc2l0aW9uO1xcbn1cIjsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCI2Y2E4ZjcxMTNiZGEzOWU3YTFiNVwiKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInRoaXMiLCJjcmVhdGVDb250ZW50IiwiY3JlYXRlQ2FudmFzIiwiY3JlYXRlUHJlbG9hZGVyIiwiY3JlYXRlUGFnZXMiLCJhZGRFdmVudExpc3RlbmVycyIsImFkZExpbmtMaXN0ZW5lcnMiLCJ1cGRhdGUiLCJwcmVsb2FkZXIiLCJQcmVsb2FkZXIiLCJjYW52YXMiLCJvbmNlIiwib25QcmVsb2FkZWQiLCJiaW5kIiwiQ2FudmFzIiwidGVtcGxhdGUiLCJjb250ZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0QXR0cmlidXRlIiwicGFnZXMiLCJhYm91dCIsIkFib3V0IiwiaG9tZSIsIkhvbWUiLCJwcm9qZWN0IiwiUHJvamVjdCIsInBhZ2UiLCJjcmVhdGUiLCJvblJlc2l6ZSIsInNob3ciLCJvblBvcFN0YXRlIiwib25DaGFuZ2UiLCJ1cmwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwicHVzaCIsIm9uQ2hhbmdlU3RhcnQiLCJoaWRlIiwicmVxdWVzdCIsImZldGNoIiwic3RhdHVzIiwiaHRtbCIsInRleHQiLCJkaXYiLCJjcmVhdGVFbGVtZW50IiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsImlubmVySFRNTCIsImRpdkNvbnRlbnQiLCJzZXRBdHRyaWJ1dGUiLCJvbkNoYW5nZUVuZCIsImNvbnNvbGUiLCJsb2ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfIiwib25Ub3VjaERvd24iLCJldmVudCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFVwIiwib25XaGVlbCIsIm5vcm1hbGl6ZWRXaGVlbCIsIk5vcm1hbGl6ZVdoZWVsIiwic2Nyb2xsIiwiZnJhbWUiLCJhZGRFdmVudExpc3RlbmVyIiwibGlua3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWFjaCIsImxpbmsiLCJvbmNsaWNrIiwiaHJlZiIsInByZXZlbnREZWZhdWx0IiwiY3NzUmVsb2FkIiwibW9kdWxlIiwiaWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9