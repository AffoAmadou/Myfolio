/*! For license information please see main.4c4d5c6d5b9eaa921132.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/classes/Page.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>m});var n=s("./node_modules/lodash/each.js"),i=s.n(n),r=s("../../../node_modules/gsap/index.js"),l=s("./node_modules/prefix/index.js"),o=s.n(l),a=s("./node_modules/normalize-wheel/index.js"),h=s.n(a);class m{constructor({id:e,element:t,elements:s}){this.id=e,this.selector=t,this.selectorChildren={...s},this.transformPrefix=o()("transform"),this.scroll={current:0,target:0,last:0,limit:0},this.onMouseWheelEvent=this.onMouseWheel.bind(this)}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},i()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=this.element.querySelectorAll(e),0===this.elements[t].lenght?this.elements[t]=null:1===this.elements[t].lenght&&(this.elements[t]=document.querySelector(e)))}))}show(){return new Promise((e=>{this.animationIn=r.default.timeline(),this.animationIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1,onComplete:e}),this.animationIn.call((e=>{this.addEventListeners()}))}))}hide(){return new Promise((e=>{this.removeEventListeners(),this.animationOut=r.default.timeline(),this.animationOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onMouseWheel(e){const{pixelY:t}=h()(e);this.scroll.target+=t}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper[0].clientHeight-window.innerHeight)}update(){this.scroll.target=r.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=r.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper[0].style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){window.addEventListener("mousewheel",this.onMouseWheelEvent)}removeEventListeners(){window.addEventListener("mouseWheel",this.onMouseWheelEvent)}}},"./app/components/Preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>o}),Object(function(){var e=new Error("Cannot find module 'classes/Component'");throw e.code="MODULE_NOT_FOUND",e}());var n=s("./node_modules/lodash/each.js"),i=s.n(n),r=s("../../../node_modules/gsap/index.js"),l=s("./app/utils/text.js");class o extends(Object(function(){var e=new Error("Cannot find module 'classes/Component'");throw e.code="MODULE_NOT_FOUND",e}())){constructor(){super({element:".preloader",elements:{title:".preloader__text",upnumber:".preloader__number__text",downumber:".preloader__reverse__text",images:document.querySelectorAll("img")}}),console.log(this.elements.images),(0,l.split)({element:this.elements.title[0],expression:"<br>"}),(0,l.split)({element:this.elements.title[0],expression:"<br>"}),this.elements.titleSpans=this.elements.title[0].querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){i()(this.elements.images,(e=>{e.onload=t=>this.onAssetLoaded(e),e.src=e.getAttribute("data-src")}))}onAssetLoaded(e){this.length+=1;const t=this.length/this.elements.images.length;this.elements.upnumber[0].innerHTML=`${Math.round(100*t)}`,this.elements.downumber[0].innerHTML=""+(100-Math.round(100*t)),1===t&&this.onLoaded()}onLoaded(){return new Promise((e=>{this.animateOut=r.default.timeline({delay:2}),this.animateOut.to([this.elements.upnumber,this.elements.downumber],{autoAlpha:0,ease:"expo.out",duration:1.2,y:"100%"}),this.animateOut.to(this.elements.titleSpans,{autoAlpha:0,delay:.1,ease:"expo.out",duration:1.5,y:"100%"}),this.animateOut.to(this.element,{scaleY:0,transformOrigin:"100% 100%"}),this.animateOut.call((e=>{this.emit("complete")}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/pages/Projects/index.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});var n=s("./app/classes/Page.js");Object(function(){var e=new Error("Cannot find module 'classes/Button'");throw e.code="MODULE_NOT_FOUND",e}());class i extends n.default{constructor(){super({id:"project",element:".project",elements:{navigation:document.querySelector(".navigation"),wrapper:".project__wrapper",link:".project__process__link"}})}create(){super.create(),this.link=new Object(function(){var e=new Error("Cannot find module 'classes/Button'");throw e.code="MODULE_NOT_FOUND",e}())({element:this.elements.link[0]})}destroy(){super.destroy(),this.link.removeEventListeners()}}}},(function(e){e.h=()=>"fdd289e70c42ffdde8cc"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,