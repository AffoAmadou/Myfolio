/*! For license information please see main.9148b99818c84d809c6d.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/animations/Parallax.js":(t,s,e)=>{e.r(s),e.d(s,{default:()=>h});var i=e("./node_modules/prefix/index.js"),a=e.n(i),n=e("./app/utils/breakpoints.js"),o=e("./app/utils/dom.js"),r=e("./app/utils/math.js");class h{constructor({element:t}){this.transform=a()("transform"),this.element=t,this.media=t.querySelector("img"),this.media.onload=()=>{this.onResize()},this.isVisible=!1,this.parallax={current:-this.amount,target:-this.amount},this.scale={current:1.15,target:1.15},this.onResize()}onResize(){this.amount=window.innerWidth<n.BREAKPOINT_TABLET?10:50,this.offset=(0,o.getOffset)(this.element)}update(t){if(console.log("scroll",t),!this.offset)return;const{innerHeight:s}=window;t.current+s>=this.offset.top?(this.parallax=(0,r.clamp)(-this.amount,this.amount,(0,r.map)(this.offset.top-t.current,-this.offset.height,s,this.amount,-this.amount)),this.scale=(0,r.clamp)(1,1.2,(0,r.map)(this.offset.top-t.current,-this.offset.height,s,1,1.2)),this.media.style[this.transform]=`translate3d(0, ${this.parallax}px, 0) scale(${this.scale})`):this.media.style[this.transform]=`translate3d(0, -${this.amount}px, 0) scale(1.15)`}}}},(function(t){t.h=()=>"381a1105af1f81e31bda"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi45MTQ4Yjk5ODE4Yzg0ZDgwOWM2ZC5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7bVFBTWUsTUFBTUEsRUFDbkJDLGFBQVksUUFBRUMsSUFDWkMsS0FBS0MsVUFBWUMsSUFBTyxhQUV4QkYsS0FBS0QsUUFBVUEsRUFDZkMsS0FBS0csTUFBUUosRUFBUUssY0FBYyxPQUNuQ0osS0FBS0csTUFBTUUsT0FBUyxLQUNsQkwsS0FBS00sVUFBTCxFQUdGTixLQUFLTyxXQUFZLEVBRWpCUCxLQUFLUSxTQUFXLENBQ2RDLFNBQVVULEtBQUtVLE9BQ2ZDLFFBQVNYLEtBQUtVLFFBR2hCVixLQUFLWSxNQUFRLENBQ1hILFFBQVMsS0FDVEUsT0FBUSxNQUdWWCxLQUFLTSxVQUNOLENBRURBLFdBQ0VOLEtBQUtVLE9BQVNHLE9BQU9DLFdBQWFDLEVBQUFBLGtCQUFvQixHQUFLLEdBQzNEZixLQUFLZ0IsUUFBU0MsRUFBQUEsRUFBQUEsV0FBVWpCLEtBQUtELFFBQzlCLENBRURtQixPQUFPQyxHQUVMLEdBREFDLFFBQVFDLElBQUksU0FBVUYsSUFDakJuQixLQUFLZ0IsT0FDUixPQUdGLE1BQU0sWUFBRU0sR0FBZ0JULE9BRUhNLEVBQU9WLFFBQVVhLEdBRWxCdEIsS0FBS2dCLE9BQU9PLEtBQzlCdkIsS0FBS1EsVUFBV2dCLEVBQUFBLEVBQUFBLFFBQ2J4QixLQUFLVSxPQUNOVixLQUFLVSxRQUNMZSxFQUFBQSxFQUFBQSxLQUNFekIsS0FBS2dCLE9BQU9PLElBQU1KLEVBQU9WLFNBQ3hCVCxLQUFLZ0IsT0FBT1UsT0FDYkosRUFDQXRCLEtBQUtVLFFBQ0pWLEtBQUtVLFNBR1ZWLEtBQUtZLE9BQVFZLEVBQUFBLEVBQUFBLE9BQ1gsRUFDQSxLQUNBQyxFQUFBQSxFQUFBQSxLQUNFekIsS0FBS2dCLE9BQU9PLElBQU1KLEVBQU9WLFNBQ3hCVCxLQUFLZ0IsT0FBT1UsT0FDYkosRUFDQSxFQUNBLE1BSUp0QixLQUFLRyxNQUFNd0IsTUFDVDNCLEtBQUtDLFdBQ0Ysa0JBQWlCRCxLQUFLUSx3QkFBd0JSLEtBQUtZLFVBRXhEWixLQUFLRyxNQUFNd0IsTUFDVDNCLEtBQUtDLFdBQ0YsbUJBQWtCRCxLQUFLVSwwQkFFL0Isa0JDOUVIa0IsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0ZXIvLi9hcHAvYW5pbWF0aW9ucy9QYXJhbGxheC5qcyIsIndlYnBhY2s6Ly9zdGFydGVyL3dlYnBhY2svcnVudGltZS9nZXRGdWxsSGFzaCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJlZml4IGZyb20gJ3ByZWZpeCc7XG5cbmltcG9ydCB7IEJSRUFLUE9JTlRfVEFCTEVUIH0gZnJvbSAndXRpbHMvYnJlYWtwb2ludHMnXG5pbXBvcnQgeyBnZXRPZmZzZXQgfSBmcm9tICd1dGlscy9kb20nXG5pbXBvcnQgeyBjbGFtcCwgbWFwIH0gZnJvbSAndXRpbHMvbWF0aCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFyYWxsYXgge1xuICBjb25zdHJ1Y3Rvcih7IGVsZW1lbnQgfSkge1xuICAgIHRoaXMudHJhbnNmb3JtID0gUHJlZml4KCd0cmFuc2Zvcm0nKTtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5tZWRpYSA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW1nJyk7XG4gICAgdGhpcy5tZWRpYS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLm9uUmVzaXplKCk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XG5cbiAgICB0aGlzLnBhcmFsbGF4ID0ge1xuICAgICAgY3VycmVudDogLXRoaXMuYW1vdW50LFxuICAgICAgdGFyZ2V0OiAtdGhpcy5hbW91bnQsXG4gICAgfTtcblxuICAgIHRoaXMuc2NhbGUgPSB7XG4gICAgICBjdXJyZW50OiAxLjE1LFxuICAgICAgdGFyZ2V0OiAxLjE1LFxuICAgIH07XG5cbiAgICB0aGlzLm9uUmVzaXplKCk7XG4gIH1cblxuICBvblJlc2l6ZSgpIHtcbiAgICB0aGlzLmFtb3VudCA9IHdpbmRvdy5pbm5lcldpZHRoIDwgQlJFQUtQT0lOVF9UQUJMRVQgPyAxMCA6IDUwO1xuICAgIHRoaXMub2Zmc2V0ID0gZ2V0T2Zmc2V0KHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICB1cGRhdGUoc2Nyb2xsKSB7XG4gICAgY29uc29sZS5sb2coJ3Njcm9sbCcsIHNjcm9sbClcbiAgICBpZiAoIXRoaXMub2Zmc2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBpbm5lckhlaWdodCB9ID0gd2luZG93O1xuXG4gICAgY29uc3Qgb2Zmc2V0Qm90dG9tID0gc2Nyb2xsLmN1cnJlbnQgKyBpbm5lckhlaWdodDtcblxuICAgIGlmIChvZmZzZXRCb3R0b20gPj0gdGhpcy5vZmZzZXQudG9wKSB7XG4gICAgICB0aGlzLnBhcmFsbGF4ID0gY2xhbXAoXG4gICAgICAgIC10aGlzLmFtb3VudCxcbiAgICAgICAgdGhpcy5hbW91bnQsXG4gICAgICAgIG1hcChcbiAgICAgICAgICB0aGlzLm9mZnNldC50b3AgLSBzY3JvbGwuY3VycmVudCxcbiAgICAgICAgICAtdGhpcy5vZmZzZXQuaGVpZ2h0LFxuICAgICAgICAgIGlubmVySGVpZ2h0LFxuICAgICAgICAgIHRoaXMuYW1vdW50LFxuICAgICAgICAgIC10aGlzLmFtb3VudCxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICB0aGlzLnNjYWxlID0gY2xhbXAoXG4gICAgICAgIDEsXG4gICAgICAgIDEuMjAsXG4gICAgICAgIG1hcChcbiAgICAgICAgICB0aGlzLm9mZnNldC50b3AgLSBzY3JvbGwuY3VycmVudCxcbiAgICAgICAgICAtdGhpcy5vZmZzZXQuaGVpZ2h0LFxuICAgICAgICAgIGlubmVySGVpZ2h0LFxuICAgICAgICAgIDEsXG4gICAgICAgICAgMS4yMCxcbiAgICAgICAgKSxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMubWVkaWEuc3R5bGVbXG4gICAgICAgIHRoaXMudHJhbnNmb3JtXG4gICAgICBdID0gYHRyYW5zbGF0ZTNkKDAsICR7dGhpcy5wYXJhbGxheH1weCwgMCkgc2NhbGUoJHt0aGlzLnNjYWxlfSlgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1lZGlhLnN0eWxlW1xuICAgICAgICB0aGlzLnRyYW5zZm9ybVxuICAgICAgXSA9IGB0cmFuc2xhdGUzZCgwLCAtJHt0aGlzLmFtb3VudH1weCwgMCkgc2NhbGUoMS4xNSlgO1xuICAgIH1cbiAgfVxufSIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjM4MWExMTA1YWYxZjgxZTMxYmRhXCIpIl0sIm5hbWVzIjpbIlBhcmFsbGF4IiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwidGhpcyIsInRyYW5zZm9ybSIsIlByZWZpeCIsIm1lZGlhIiwicXVlcnlTZWxlY3RvciIsIm9ubG9hZCIsIm9uUmVzaXplIiwiaXNWaXNpYmxlIiwicGFyYWxsYXgiLCJjdXJyZW50IiwiYW1vdW50IiwidGFyZ2V0Iiwic2NhbGUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiQlJFQUtQT0lOVF9UQUJMRVQiLCJvZmZzZXQiLCJnZXRPZmZzZXQiLCJ1cGRhdGUiLCJzY3JvbGwiLCJjb25zb2xlIiwibG9nIiwiaW5uZXJIZWlnaHQiLCJ0b3AiLCJjbGFtcCIsIm1hcCIsImhlaWdodCIsInN0eWxlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImgiXSwic291cmNlUm9vdCI6IiJ9