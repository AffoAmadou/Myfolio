/*! For license information please see main.f80984ea6eaa79eba098.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatestarter("main",{"./app/index.js":(e,t,s)=>{s.r(t);var a=s("./app/pages/About/index.js"),n=s("./app/pages/Projects/index.js"),o=s("./node_modules/lodash/each.js"),c=s.n(o),i=s("./app/pages/Home/index.js");new class{constructor(){this.createContent(),this.createPages(),this.addLinkListeners()}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={about:new a.default,home:new i.default,project:new n.default},this.page=this.pages[this.template],console.log(this.page),this.page.create(),this.page.show()}onChange(e){console.log(e)}addLinkListeners(){const e=document.querySelectorAll("a");c()(e,(e=>{e.onclick=t=>{const{href:s}=e;t.preventDefault(),this.onChange(s)}}))}}}},(function(e){e.h=()=>"0ebd2e348bf8581449b8"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5mODA5ODRlYTZlYWE3OWViYTA5OC5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7OE9BeUVBLElBNURBLE1BQ0lBLGNBQ0lDLEtBQUtDLGdCQUtMRCxLQUFLRSxjQUdMRixLQUFLRyxrQkFHUixDQUVERixnQkFFSUQsS0FBS0ksUUFBVUMsU0FBU0MsY0FBYyxZQUN0Q04sS0FBS08sU0FBV1AsS0FBS0ksUUFBUUksYUFBYSxnQkFFN0MsQ0FHRE4sY0FDSUYsS0FBS1MsTUFBUSxDQUNUQyxNQUFPLElBQUlDLEVBQUFBLFFBQ1hDLEtBQU0sSUFBSUMsRUFBQUEsUUFDVkMsUUFBUyxJQUFJQyxFQUFBQSxTQUlqQmYsS0FBS2dCLEtBQU9oQixLQUFLUyxNQUFNVCxLQUFLTyxVQUM1QlUsUUFBUUMsSUFBSWxCLEtBQUtnQixNQUNqQmhCLEtBQUtnQixLQUFLRyxTQUNWbkIsS0FBS2dCLEtBQUtJLE1BR2IsQ0FHREMsU0FBU0MsR0FDTEwsUUFBUUMsSUFBSUksRUFDZixDQUdEbkIsbUJBQ0ksTUFBTW9CLEVBQVFsQixTQUFTbUIsaUJBQWlCLEtBRXhDQyxJQUFLRixHQUFPRyxJQUNSQSxFQUFLQyxRQUFVQyxJQUNYLE1BQU0sS0FBRUMsR0FBU0gsRUFDakJFLEVBQU1FLGlCQUVOOUIsS0FBS3FCLFNBQVNRLEVBQWQsQ0FKSixHQVFQLGtCQ3RFTEUsRUFBb0JDLEVBQUksSUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YXJ0ZXIvLi9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giXSwic291cmNlc0NvbnRlbnQiOlsiLy8hIEltcG9ydG8gbGUgZGl2ZXJzZSBwYWdpbmUgc2FwZW5kbyBjaGUgYWxsJ2ludGVybm8gY2kgc29ubyBkZWdsaSBpbmRleCBxdWluZGlcclxuLy8hIE5lc3N1biBiaXNvZ25vIGRpIGNoaWFtYXJlIGlsIGZpbGUgaW50ZXJvXHJcblxyXG5pbXBvcnQgQWJvdXQgZnJvbSAncGFnZXMvQWJvdXQnXHJcbmltcG9ydCBQcm9qZWN0IGZyb20gJ3BhZ2VzL1Byb2plY3RzJ1xyXG5pbXBvcnQgZWFjaCBmcm9tICdsb2Rhc2gvZWFjaCdcclxuXHJcbi8vIGltcG9ydCBDb2xsZWN0aW9ucyBmcm9tICdwYWdlcy9Db2xsZWN0aW9ucydcclxuLy8gaW1wb3J0IERldGFpbCBmcm9tICdwYWdlcy9EZXRhaWwnXHJcbmltcG9ydCBIb21lIGZyb20gJ3BhZ2VzL0hvbWUnXHJcblxyXG4vLyogSU1QT1JUTyBHTEkgSU5ERVggUFJFU0VOVEkgTkVMTEUgQ0FSVEVMTEVcclxuXHJcbmNsYXNzIEFwcCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKSAvLyEgUXVlc3RvIG1ldG9kbyBtaSBwZXJtZXR0ZSBkaSBjcmVhcmUgaWwgY29udGVudCBlIGNvc2kgZGEgcmVjdXBlcmFyZSBpbCBkYXRhLXRlbXBsYXRlIFxyXG4gICAgICAgIC8vISBFIHBlcmNpbyBzYXBlcmUgaW4gY2hlIHBhZ2luYSBtaSB0cm92b1xyXG5cclxuICAgICAgICAvLyB0aGlzLmNyZWF0ZVByZWxvYWRlcigpXHJcbiAgICAgICAgLy8gdGhpcy5jcmVhdGVOYXZpZ2F0aW9uKClcclxuICAgICAgICB0aGlzLmNyZWF0ZVBhZ2VzKClcclxuICAgICAgICAvLyAgICAgdGhpcy5jcmVhdGVDYW52YXMoKVxyXG4gICAgICAgIC8vICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKClcclxuICAgICAgICB0aGlzLmFkZExpbmtMaXN0ZW5lcnMoKVxyXG5cclxuICAgICAgICAvLyAgICAgdGhpcy51cGRhdGUoKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNvbnRlbnQoKSB7XHJcbiAgICAgICAgLy8/UXVpIGVzZWd1byBpbCBjcmVhdGUgY29udGVudCBwZXIgc2FwZXJlIGluIHF1YWxlIHBhZ2luYSBtaSB0cm92byBhdHR1YWxtZW50ZVxyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JylcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGhpcy5jb250ZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10ZW1wbGF0ZScpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy50ZW1wbGF0ZSlcclxuICAgIH1cclxuXHJcbiAgICAvLz8gSSBxdWVzdG8gbW9kbyBjcmVvIGwnb2dnZXR0byBQQUdJTkFcclxuICAgIGNyZWF0ZVBhZ2VzKCkge1xyXG4gICAgICAgIHRoaXMucGFnZXMgPSB7XHJcbiAgICAgICAgICAgIGFib3V0OiBuZXcgQWJvdXQoKSxcclxuICAgICAgICAgICAgaG9tZTogbmV3IEhvbWUoKSxcclxuICAgICAgICAgICAgcHJvamVjdDogbmV3IFByb2plY3QoKSwgLy8hSWwgbm9tZSBjb2xvcmF0byBkZXZlIGVzc2VyZSB1Z3VhbGUgYSBub21lIGRhdG8gbmVsIHRlbXBsYXRlIFxyXG4gICAgICAgICAgICAvLyBkZXRhaWw6IG5ldyBEZXRhaWwoKSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFnZSA9IHRoaXMucGFnZXNbdGhpcy50ZW1wbGF0ZV0gLy8/SU5TRVJJU0NPIExBIFBBR0lOQSBJTiBDVUkgU09OTyBBVFRVQUxNRU5URVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGFnZSlcclxuICAgICAgICB0aGlzLnBhZ2UuY3JlYXRlKCkgLy8/IENoaWFtbyBpbCBjcmVhdGUgbmVsbGEgY2xhc3NlIHBhZ2UgY2hlIMOpIGxlZ2F0YSBhZCBvZ251bmEgZGVsbGUgcGFnaW5lXHJcbiAgICAgICAgdGhpcy5wYWdlLnNob3coKVxyXG4gICAgICAgIC8vIHRoaXMucGFnZS5oaWRlKClcclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIG9uQ2hhbmdlKHVybCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHVybClcclxuICAgIH1cclxuXHJcblxyXG4gICAgYWRkTGlua0xpc3RlbmVycygpIHtcclxuICAgICAgICBjb25zdCBsaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKSAvLyEgUmVjdXBlcm8gdHV0dGkgaSBsaW5rIGRlbGxhIHBhZ2luYSBcclxuXHJcbiAgICAgICAgZWFjaChsaW5rcywgbGluayA9PiB7XHJcbiAgICAgICAgICAgIGxpbmsub25jbGljayA9IGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgaHJlZiB9ID0gbGlua1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKSAvLyFhbGwgY2xpY2sgbm9uIGVzZWd1byBpbCBjYW1iaW8gZGkgcGFnaW5hIGNvbWUgZG92cmViYmUgZXNzZXJlclxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoaHJlZikvLypGdW56aW9uZSBjaGUgc2kgdHJvdmEgc29wcmEgUGVyIGdlc3RpcmUgaWwgY2FtYmlvIGRpIHBhZ2luYVxyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZXZlbnQsIGhyZWYpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG5uZXcgQXBwKCkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCIwZWJkMmUzNDhiZjg1ODE0NDliOFwiKSJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInRoaXMiLCJjcmVhdGVDb250ZW50IiwiY3JlYXRlUGFnZXMiLCJhZGRMaW5rTGlzdGVuZXJzIiwiY29udGVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInRlbXBsYXRlIiwiZ2V0QXR0cmlidXRlIiwicGFnZXMiLCJhYm91dCIsIkFib3V0IiwiaG9tZSIsIkhvbWUiLCJwcm9qZWN0IiwiUHJvamVjdCIsInBhZ2UiLCJjb25zb2xlIiwibG9nIiwiY3JlYXRlIiwic2hvdyIsIm9uQ2hhbmdlIiwidXJsIiwibGlua3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWFjaCIsImxpbmsiLCJvbmNsaWNrIiwiZXZlbnQiLCJocmVmIiwicHJldmVudERlZmF1bHQiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiaCJdLCJzb3VyY2VSb290IjoiIn0=